<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>llvm初勘之.ll文件内容分析</title>
      <link href="/2025/10/13/llvm%E5%88%9D%E5%8B%98%E4%B9%8B.ll%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%88%86%E6%9E%90/"/>
      <url>/2025/10/13/llvm%E5%88%9D%E5%8B%98%E4%B9%8B.ll%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>llvm初勘之llvm IR简单介绍</title>
      <link href="/2025/10/08/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bllvm%20IR%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
      <url>/2025/10/08/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bllvm%20IR%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-llvm-IR是什么"><a href="#1-llvm-IR是什么" class="headerlink" title="1. llvm IR是什么"></a>1. llvm IR是什么</h2><p>作为<code>llvm</code>前后端的桥梁，<code>llvm IR</code>在其中占据十分重要的作用。<code>llvm IR</code>即<code>llvm</code>中间表示，是语言无关和平台无关的，即不依赖于前端的高级语言和后端平台，是一种低级语言，特性如下：</p><ul><li>类<code>RISC</code>三地址指令</li><li>使用无限虚拟寄存器的SSA形式</li><li>低层次控制流结构</li><li><code>Load/Store</code>指令使用类型指针</li></ul><h3 id="1-1-为什么需要llvm-IR呢？"><a href="#1-1-为什么需要llvm-IR呢？" class="headerlink" title="1.1 为什么需要llvm IR呢？"></a>1.1 为什么需要<code>llvm IR</code>呢？</h3><p>在实际的编译过程中，可能会需要多个开发语言，那么语言的开发者就会想到如下问题：</p><ol><li>怎么能让编程语言在尽可能多的目标架构平台上运行？</li><li>怎么才能让编程语言充分利用各个平台自身的优势，做到最大程度的优化？</li></ol><p>如果没有<code>llvm IR</code>，此时如果想要增加一种新的语言支持，会发生什么情况呢？<br>在没有<code>llvm IR</code>这样统一的、与语言和硬件无关的中间表示时，编译器通常是<code>N*M</code>的复杂度（N种前端、M种后端），这意味着要让所有语言在所有架构上都运行，理论上则需要<code>N*M</code>个不同的编译器转换模块。如果此时添加一种新的语言支持，则需要进行如下修改：</p><ul><li>前端：需要编写对应的词法分析、语法分析等功能的实现，然后将其映射到中间表示上；</li><li>中端：中端要进行的操作可能会少一点，但是如果新的语言的中间表示是全新的，那么以前的优化则完全不可用；</li><li>后端：必须为每一个目标架构都编写一个独立的代码生成器；</li></ul><p>如果此时有<code>llvm IR</code>，由于<code>llvm IR</code>将前端和后端实现了完全的解耦，前端的操作并不会影响后端，后端的操作也不会影响前端，所以此时要做的工作就非常少。也就是将复杂度从<code>N*M</code>降低到了<code>N+M</code>，如下：</p><ul><li>前端：需要提供从源代码到<code>llvm IR</code>的支持；</li><li>中端：不需要做任何修改；</li><li>后端：不需要做任何修改</li></ul><h3 id="1-2-llvm-IR的三种表示形式"><a href="#1-2-llvm-IR的三种表示形式" class="headerlink" title="1.2 llvm IR的三种表示形式"></a>1.2 llvm IR的三种表示形式</h3><p><code>llvm IR</code>有三种表示形式，分别是<code>.ll</code>（可读格式）文件、<code>.bc</code>（位代码）文件以及内存格式文件。三种文件格式中，内存格式是存在于<code>llvm</code>的整个运行过程中的，是其通用的内部表示，<code>.ll</code>格式是我们程序员通常看的格式，可以理解为汇编语言格式；<code>.bc</code>文件也称位码文件，是有一串0和1组成。<br>这三种表示形式可以互相转换，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.c → .ll (文本IR)</span></span><br><span class="line">clang -S -emit-llvm test.c -o test.ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.ll → .bc (位码)</span></span><br><span class="line">llvm-as test.ll -o test.bc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bc → .ll</span> </span><br><span class="line">llvm-dis test.bc -o test.ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bc → 目标文件</span></span><br><span class="line">llc test.bc -o test.s</span><br></pre></td></tr></table></figure><p>想要理解<code>llvm IR</code>中间表示，则需要理解<code>.ll</code>文件中的信息，比如说代码中的全局变量在<code>llvm IR</code>中是怎么实现的等等。</p><h3 id="1-3-针对llvm-IR的优化"><a href="#1-3-针对llvm-IR的优化" class="headerlink" title="1.3 针对llvm IR的优化"></a>1.3 针对llvm IR的优化</h3><p><code>llvm</code>中使用<code>opt</code>进行优化，这些优化都是在<code>llvm IR</code>的基础上进行的，即都是与语言和架构无关的，所以在这里进行的是通用优化，比如说死代码消除等。<br>需要注意的是，如果直接使用<code>opt</code>完成优化，可能不会有任何优化出现，原因是：<code>clang</code>默认给所有<code>O0</code>优化级别的函数增加<code>optnone</code>属性，导致这些函数不会被优化。<br>以下面的测试代码为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> global_data = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;global_data = %d\n&quot;</span>, global_data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们使用命令<code>clang -S -emit-llvm test.c</code>编译并生成<code>.ll</code>中间表示，查看其中与<code>main</code>函数相关的属性信息，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">define dso_local i32 @main() #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">retval = alloca i32, align 4</span></span><br><span class="line">  store i32 0, ptr %retval, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr @global_data, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str, i32 noundef %0)</span></span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone uwtable &quot;frame-pointer&quot;=&quot;all&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>main</code>函数中具有<code>optnone</code>属性，此时直接使用<code>opt -S test.ll -O3 -o test_opt.ll</code>完成优化，<code>.ll</code>文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">define dso_local i32 @main() local_unnamed_addr #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">retval = alloca i32, align 4</span></span><br><span class="line">  store i32 0, ptr %retval, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr @global_data, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str, i32 noundef %0)</span></span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone uwtable &quot;frame-pointer&quot;=&quot;all&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br></pre></td></tr></table></figure><p>可以看到，使用<code>opt</code>和未使用<code>opt</code>的区别在于：使用<code>opt</code>之后<code>main</code>函数增加了一个<code>local_unnamed_addr</code>属性，该属性表明该函数在当前模块中是局部的，不必要关注该函数对应符号的地址，只关注其内容。<br>当我们一开始在使用<code>clang</code>的时候就指定优化级别，则不会出现该属性，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define dso_local noundef i32 @main() local_unnamed_addr #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr @global_data, align 4, !tbaa !5</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = <span class="built_in">tail</span> call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %0)</span></span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; nofree nounwind uwtable &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br></pre></td></tr></table></figure><p>可以看到，函数的反汇编代码这一块有了很大的减少，所以可以说明，在使用<code>clang/clang++</code>的时候，如果未指定优化级别，则默认是<code>-O0</code>级别，不会进行任何优化，此时使用<code>opt</code>命令进行优化也不会起到任何的作用。<br>如果想要解决这个问题，可以通过以下两种方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法1：编译时禁用 optnone</span></span><br><span class="line">clang -S -emit-llvm -Xclang -disable-O0-optnone test.c -o test.ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法2：使用 opt 强制移除 optnone</span></span><br><span class="line">opt -S -O3 -force-remove-attribute=optnone test.ll -o test_opt.ll</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>llvm初勘之clang(一)</title>
      <link href="/2025/10/07/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bclang%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/10/07/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bclang%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是clang"><a href="#1-什么是clang" class="headerlink" title="1. 什么是clang"></a>1. 什么是clang</h2><p>clang是llvm中的一个子项目，是llvm中的用于编译C语言的前端驱动，负责完成预处理、词法分析、语法分析、语义分析、静态分析以及生成中间代码。<br>在实际的应用中，clang驱动会调用cc1工具完成编译功能。</p><h2 id="2-clang静态分析器"><a href="#2-clang静态分析器" class="headerlink" title="2. clang静态分析器"></a>2. clang静态分析器</h2><p>clang静态分析器是在语义分析完成之后需要进行静态分析。这里的静态分析指的是在编译时模拟程序运行，通过<strong>路径敏感</strong>的方式判断程序中哪些路径不可执行，进而删除&#x2F;裁剪掉这些路径。<br>路径敏感：考虑程序控制流中所有可能的路径，进而模拟程序执行。在clang中有如下内容：</p><ul><li>ProgramState：程序状态，类似于虚拟机中的快照，包含变量的符号值、内存状态、约束集等；</li><li>ConstrainManager：约束管理器，负责管理和推理这些约束；</li></ul><p>在clang内部，语义分析完成后，生成的是AST抽象语法树，在静态分析器中，会根据AST构建CFG（程序控制流图），然后基于这个CFG进行推理。在推理过程中，如果遇到分支状态，则会做出假设，以下面的代码为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">5</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">3</span>) &#123; ... &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在到了if这里时，会有两个状态s1和s2，其约束集如下：<br>s1：假设 i&gt;5 ，此时的约束集为  i&gt;5<br>s2：假设 i&lt;&#x3D;5 ，此时的约束集为 i&lt;&#x3D;5<br>以s1节点出发，继续往下，此时遇到<code>if(i&lt;3)</code>，假设这个条件满足，那么此时的约束集变成了<code>i&gt;5, i&lt;3</code>，可以看到，这两个此时会发生冲突，所以此条路径不可能被满足，所以这条路径会被删除。<br>进而判断s2这条路径…</p><h2 id="3-clang编译一个源程序的详细过程"><a href="#3-clang编译一个源程序的详细过程" class="headerlink" title="3. clang编译一个源程序的详细过程"></a>3. clang编译一个源程序的详细过程</h2><p>通过<code>-v</code>参数可以打印出编译链接的详细过程，这里以<code>hello.cpp</code>为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;hello world!&quot;</span> &lt;&lt; endl;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过命令<code>clang++ -v hello.cpp -o hello</code>查看整个编译链接流程，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">❯ clang++ -v hello.cpp -o hello</span><br><span class="line">clang version 22.0.0git (git@github.com:llvm/llvm-project.git 7d748a9ceb3716a216a8b586b1d31e046bdee039)</span><br><span class="line">Target: x86_64-unknown-linux-gnu</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /home/dus/llvm/tools/RelWithDebInfo/bin</span><br><span class="line">Build config: +assertions</span><br><span class="line">Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/13</span><br><span class="line">Selected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/13</span><br><span class="line">Candidate multilib: .;@m64</span><br><span class="line">Selected multilib: .;@m64</span><br><span class="line"> &quot;/home/dus/llvm/tools/RelWithDebInfo/bin/clang-22&quot; -cc1 -triple x86_64-unknown-linux-gnu -emit-obj -dumpdir hello- -disable-free -clear-ast-before-backend -main-file-name hello.cpp -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=all -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fdebug-compilation-dir=/home/dus/llvm/test -v -fcoverage-compilation-dir=/home/dus/llvm/test -resource-dir /home/dus/llvm/tools/RelWithDebInfo/lib/clang/22 -internal-isystem /usr/include/c++/v1 -internal-isystem /home/dus/llvm/tools/RelWithDebInfo/lib/clang/22/include -internal-isystem /usr/local/include -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/13/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -fdeprecated-macro -ferror-limit 19 -fmessage-length=92 -fgnuc-version=4.2.1 -fskip-odr-check-in-gmf -fcxx-exceptions -fexceptions -fcolor-diagnostics -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/hello-74c908.o -x c++ hello.cpp</span><br><span class="line">clang -cc1 version 22.0.0git based upon LLVM 22.0.0git default target x86_64-unknown-linux-gnu</span><br><span class="line">ignoring nonexistent directory &quot;/usr/lib/gcc/x86_64-linux-gnu/13/../../../../x86_64-linux-gnu/include&quot;</span><br><span class="line">ignoring nonexistent directory &quot;/include&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include <span class="string">&quot;...&quot;</span> search starts here:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;...&gt; search starts here:</span></span><br><span class="line"> /usr/include/c++/v1</span><br><span class="line"> /home/dus/llvm/tools/RelWithDebInfo/lib/clang/22/include</span><br><span class="line"> /usr/local/include</span><br><span class="line"> /usr/include/x86_64-linux-gnu</span><br><span class="line"> /usr/include</span><br><span class="line">End of search list.</span><br><span class="line"> &quot;/home/dus/llvm/tools/RelWithDebInfo/bin/ld.lld&quot; -z relro --hash-style=gnu --eh-frame-hdr -m elf_x86_64 -pie -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o hello /lib/x86_64-linux-gnu/Scrt1.o /lib/x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/13/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/13 -L/usr/lib/gcc/x86_64-linux-gnu/13/../../../../lib64 -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu -L/usr/lib64 -L/lib -L/usr/lib /tmp/hello-74c908.o -lc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-linux-gnu/13/crtendS.o /lib/x86_64-linux-gnu/crtn.o</span><br></pre></td></tr></table></figure><p>可以看到，从<code>.cpp</code>文件到可执行文件主要调用了<code>clang-22</code>和<code>ld.lld</code>。其中<code>clang-22</code>主要完成了前中后端，相当于上一篇文章中<code>clang+opt+llc(-filetype=obj)</code>的整合，此时生成了<code>.o</code>目标文件，后续通过<code>ld.lld</code>完成链接过程，生成可执行文件。</p><p>为了更好的理解中间过程，可以通过给<code>cc1</code>传递参数，打印出中间的结果，如下：</p><ol><li>词法分析</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ -fmodules -fsyntax-only -Xclang -dump-tokens hello.cpp</span><br></pre></td></tr></table></figure><p>此时会打印出<code>hello.cpp</code>文件的词法分析信息，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">annot_module_include  Loc=&lt;hello.cpp:1:1&gt;</span><br><span class="line">using &#x27;using&#x27;  [StartOfLine] Loc=&lt;hello.cpp:3:1&gt;</span><br><span class="line">namespace &#x27;namespace&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:3:7&gt;</span><br><span class="line">identifier &#x27;std&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:3:17&gt;</span><br><span class="line">semi &#x27;;&#x27;  Loc=&lt;hello.cpp:3:20&gt;</span><br><span class="line">int &#x27;int&#x27;  [StartOfLine] Loc=&lt;hello.cpp:5:1&gt;</span><br><span class="line">identifier &#x27;main&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:5:5&gt;</span><br><span class="line">l_paren &#x27;(&#x27;  Loc=&lt;hello.cpp:5:9&gt;</span><br><span class="line">r_paren &#x27;)&#x27;  Loc=&lt;hello.cpp:5:10&gt;</span><br><span class="line">l_brace &#x27;&#123;&#x27;  Loc=&lt;hello.cpp:5:11&gt;</span><br><span class="line">identifier &#x27;cout&#x27;  [StartOfLine] [LeadingSpace] Loc=&lt;hello.cpp:6:2&gt;</span><br><span class="line">lessless &#x27;&lt;&lt;&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:6:7&gt;</span><br><span class="line">string_literal &#x27;&quot;hello world!&quot;&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:6:10&gt;</span><br><span class="line">lessless &#x27;&lt;&lt;&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:6:25&gt;</span><br><span class="line">identifier &#x27;endl&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:6:28&gt;</span><br><span class="line">semi &#x27;;&#x27;  Loc=&lt;hello.cpp:6:32&gt;</span><br><span class="line">return &#x27;return&#x27;  [StartOfLine] [LeadingSpace] Loc=&lt;hello.cpp:7:2&gt;</span><br><span class="line">numeric_constant &#x27;0&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:7:9&gt;</span><br><span class="line">semi &#x27;;&#x27;  Loc=&lt;hello.cpp:7:10&gt;</span><br><span class="line">r_brace &#x27;&#125;&#x27;  [StartOfLine] Loc=&lt;hello.cpp:8:1&gt;</span><br><span class="line">eof &#x27;&#x27;  Loc=&lt;hello.cpp:8:2&gt;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>hello.cpp</code>文件中，<code>(</code>就是一个<code>token</code>，在词法分析中被识别为<code>l_paren</code>，上面的就是词法分析的输出结果。因此，词法分析的最终输出结果就是一个个的<code>token</code>流。</p><ol start="2"><li>语法分析</li></ol><p>整个编译过程中，除了llvm IR,最重要的就是AST（抽象语法树），可以通过命令查看抽象语法树的输出，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ -fmodules -fsyntax-only -Xclang -ast-dump hello.cpp</span><br></pre></td></tr></table></figure><p>上面命令的运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">TranslationUnitDecl 0x6506cc477cd8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; &lt;undeserialized declarations&gt;</span><br><span class="line">|-TypedefDecl 0x6506cc4789c8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __int128_t &#x27;__int128&#x27;</span><br><span class="line">| `-BuiltinType 0x6506cc4782a0 &#x27;__int128&#x27;</span><br><span class="line">|-TypedefDecl 0x6506cc478a38 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __uint128_t &#x27;unsigned __int128&#x27;</span><br><span class="line">| `-BuiltinType 0x6506cc4782c0 &#x27;unsigned __int128&#x27;</span><br><span class="line">|-TypedefDecl 0x6506cc4cc248 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __NSConstantString &#x27;__NSConstantString_tag&#x27;</span><br><span class="line">| `-RecordType 0x6506cc4cc210 &#x27;__NSConstantString_tag&#x27; canonical</span><br><span class="line">|   `-CXXRecord 0x6506cc478a90 &#x27;__NSConstantString_tag&#x27;</span><br><span class="line">|-TypedefDecl 0x6506cc4785b8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_ms_va_list &#x27;char *&#x27;</span><br><span class="line">| `-PointerType 0x6506cc478570 &#x27;char *&#x27; imported</span><br><span class="line">|   `-BuiltinType 0x6506cc477d80 &#x27;char&#x27;</span><br><span class="line">|-TypedefDecl 0x6506cc478958 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_va_list &#x27;__va_list_tag[1]&#x27;</span><br><span class="line">| `-ConstantArrayType 0x6506cc478900 &#x27;__va_list_tag[1]&#x27; 1 </span><br><span class="line">|   `-RecordType 0x6506cc4788c0 &#x27;__va_list_tag&#x27; imported canonical</span><br><span class="line">|     `-CXXRecord 0x6506cc478610 &#x27;__va_list_tag&#x27;</span><br><span class="line">|-ImportDecl 0x6506cc4ccce0 &lt;hello.cpp:1:1&gt; col:1 implicit std_iostream</span><br><span class="line">|-UsingDirectiveDecl 0x6506cea257d0 &lt;line:3:1, col:17&gt; col:17 Namespace 0x6506ce9d2fb8 &#x27;std&#x27;</span><br><span class="line">`-FunctionDecl 0x6506cea25888 &lt;line:5:1, line:8:1&gt; line:5:5 main &#x27;int ()&#x27;</span><br><span class="line">  `-CompoundStmt 0x6506ceaae580 &lt;col:11, line:8:1&gt;</span><br><span class="line">    |-CXXOperatorCallExpr 0x6506ceaae4e8 &lt;line:6:2, col:28&gt; &#x27;std::ostream&#x27; lvalue &#x27;&lt;&lt;&#x27;</span><br><span class="line">    | |-ImplicitCastExpr 0x6506ceaae4d0 &lt;col:25&gt; &#x27;std::ostream &amp;(*)(std::ostream &amp;(*)(std::ostream &amp;))&#x27; &lt;FunctionToPointerDecay&gt;</span><br><span class="line">    | | `-DeclRefExpr 0x6506ceaae448 &lt;col:25&gt; &#x27;std::ostream &amp;(std::ostream &amp;(*)(std::ostream &amp;))&#x27; lvalue CXXMethod 0x6506cea9b6e8 &#x27;operator&lt;&lt;&#x27; &#x27;std::ostream &amp;(std::ostream &amp;(*)(std::ostream &amp;))&#x27;</span><br><span class="line">    | |-CXXOperatorCallExpr 0x6506ceacafd8 &lt;col:2, col:10&gt; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt;&#x27;:&#x27;std::ostream&#x27; lvalue &#x27;&lt;&lt;&#x27;</span><br><span class="line">    | | |-ImplicitCastExpr 0x6506ceacafc0 &lt;col:7&gt; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(*)(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;, const char *)&#x27; &lt;FunctionToPointerDecay&gt;</span><br><span class="line">    | | | `-DeclRefExpr 0x6506ceacaf38 &lt;col:7&gt; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;, const char *)&#x27; lvalue Function 0x6506ceabc0f0 &#x27;operator&lt;&lt;&#x27; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;, const char *)&#x27;</span><br><span class="line">    | | |-DeclRefExpr 0x6506cea1a390 &lt;col:2&gt; &#x27;ostream&#x27;:&#x27;std::ostream&#x27; lvalue Var 0x6506cea25980 &#x27;cout&#x27; &#x27;ostream&#x27;:&#x27;std::ostream&#x27;</span><br><span class="line">    | | `-ImplicitCastExpr 0x6506ceacaf20 &lt;col:10&gt; &#x27;const char *&#x27; &lt;ArrayToPointerDecay&gt;</span><br><span class="line">    | |   `-StringLiteral 0x6506cea18e90 &lt;col:10&gt; &#x27;const char[13]&#x27; lvalue &quot;hello world!&quot;</span><br><span class="line">    | `-ImplicitCastExpr 0x6506ceaae430 &lt;col:28&gt; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(*)(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;)&#x27; &lt;FunctionToPointerDecay&gt;</span><br><span class="line">    |   `-DeclRefExpr 0x6506ceaae408 &lt;col:28&gt; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;)&#x27; lvalue Function 0x6506ceacfa10 &#x27;endl&#x27; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;)&#x27; (FunctionTemplate 0x6506ceaccae0 &#x27;endl&#x27;)</span><br><span class="line">    `-ReturnStmt 0x6506ceaae570 &lt;line:7:2, col:9&gt;</span><br><span class="line">      `-IntegerLiteral 0x6506ceaae550 &lt;col:9&gt; &#x27;int&#x27; 0</span><br></pre></td></tr></table></figure><p>上述输出，就是<code>hello.cpp</code>的语法树结果，该语法树中每个节点有如下重要信息：</p><ul><li>节点类型说明：比如说 <code>FunctionDecl</code> 说明该节点是一个函数定义节点；<code>CXXOperatorCallExpr</code> 表示<code>C++</code>运算符调用表达式；</li><li>内存地址（虚拟地址）：比如说<code>FunctionDecl</code>节点的虚拟地址为<code>0x6506cea25888</code>；</li><li>源码位置：比如说<code>FunctionDecl</code>节点对应的函数名为<code>main</code>，所在位置为<code>&lt;line:5:1, line:8:1&gt; line:5:5</code>，即表明<code>main</code>函数这个函数体的位置是第5行到第8行，其中<code>main</code>标识符所在的位置是第5行第5列</li><li>层次结构：整个AST中有如下结构，表明抽象树节点之间的关系，如下<ul><li><code>|</code>：表明上面还有兄弟节点，用竖线连接起来；</li><li><code>|-</code>：该节点是某个父节点的子节点之一（非最后一个子节点）；</li><li>&#96;&#96;-&#96;：该节点是某个父节点的最后一个子节点；</li><li>空格：用来对齐，表示当前节点所在层级</li></ul></li></ul><p>以<code>main</code>函数这部分为例，分析并使用<code>xmind</code>绘制出树形结构。结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FunctionDecl: main &#x27;int ()&#x27;</span><br><span class="line">└── CompoundStmt</span><br><span class="line">    ├── CXXOperatorCallExpr: &#x27;&lt;&lt;&#x27;</span><br><span class="line">    │   ├── ImplicitCastExpr (FunctionToPointerDecay)</span><br><span class="line">    │   │   └── DeclRefExpr: &#x27;operator&lt;&lt;&#x27; (CXXMethod)</span><br><span class="line">    │   ├── CXXOperatorCallExpr: &#x27;&lt;&lt;&#x27;</span><br><span class="line">    │   │   ├── ImplicitCastExpr (FunctionToPointerDecay)</span><br><span class="line">    │   │   │   └── DeclRefExpr: &#x27;operator&lt;&lt;&#x27; (Function)</span><br><span class="line">    │   │   ├── DeclRefExpr: &#x27;cout&#x27; (Var)</span><br><span class="line">    │   │   └── ImplicitCastExpr (ArrayToPointerDecay)</span><br><span class="line">    │   │       └── StringLiteral: &quot;hello world!&quot;</span><br><span class="line">    │   └── ImplicitCastExpr (FunctionToPointerDecay)</span><br><span class="line">    │       └── DeclRefExpr: &#x27;endl&#x27; (Function)</span><br><span class="line">    └── ReturnStmt</span><br><span class="line">        └── IntegerLiteral: 0</span><br></pre></td></tr></table></figure><p>上面是使用shell表示的抽象语法树，下面是我自己手绘的结构图</p><p><img src="https://cdn.jsdelivr.net/gh/firstHeart09/picgo-image/img/20251004002406597.jpg" alt="main函数抽象语法树结构体"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>llvm初勘之llvm基础知识</title>
      <link href="/2025/10/07/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bllvm%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/10/07/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bllvm%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是llvm"><a href="#1-什么是llvm" class="headerlink" title="1. 什么是llvm"></a>1. 什么是llvm</h2><p>llvm是一个开源的<strong>编译器基础设施项目</strong>，由一系列可重用的编译器工具链库和工具组成。<br>llvm的设计目标是：<strong>高度模块化、可重用、跨平台</strong>。</p><h3 id="1-1-典型的三段式设计"><a href="#1-1-典型的三段式设计" class="headerlink" title="1.1 典型的三段式设计"></a>1.1 典型的三段式设计</h3><p>llvm采用经典的三段式设计，这种设计使得llvm既灵活又强大：</p><ul><li>前端：负责将源代码（如C、C++）解析，进行词法、语法、语义检查，生成与目标架构无关的llvm中间表示；</li><li>中端：也叫优化器，在llvm IR上进行与目标架构无关的优化，如死代码消除、循环优化等；</li><li>后端：负责将优化后的llvm IR映射到特定的目标架构，进行与目标架构相关的指令选择、寄存器分配、指令调度等，生成与目标架构相关的代码。严格意义上，LLVM 后端（llc）主要输出汇编文件 .s文件，但通过 Clang 可以直接得到 .o文件。</li></ul><p>可以看到，llvm IR是连接整个系统的桥梁，是实现语言与架构无关型的关键。这种设计模式带来了巨大的优势：要支持一种新语言，只需要实现对应的前端即可；要实现一个新的架构，只需要实现对应的后端即可。</p><h3 id="1-2-如何理解llvm是一个编译基础设施，而不是一个编译器"><a href="#1-2-如何理解llvm是一个编译基础设施，而不是一个编译器" class="headerlink" title="1.2 如何理解llvm是一个编译基础设施，而不是一个编译器"></a>1.2 如何理解llvm是一个编译基础设施，而不是一个编译器</h3><p>可以这样理解，llvm本身是一个编译器基础设施（编译器框架和工具包），而不是向GCC一样是一个一体化的编译器。在实际的使用中，我们不会使用llvm作为命令去编译源文件，而是通过某个语言前端（比如说C语言使用clang前端）来驱动整个编译流程，这也就是《LLVM编译器原理与实战》中为什么会说：llvm是一堆库与机制的组合，可以将源代码整体框架编译，但不能编译任何代码  的原因。<br>前端会将源代码翻译成llvm IR，然后调用llvm提供的优化器和代码生成器完成后续的流程。<br>举例如下：</p><ul><li>GCC方式：<code>gcc hello.c -o hello</code></li><li>llvm方式：<code>clang hello.c -o hello</code>（调用clang前端，内部调用llvm的库完成优化和代码生成）</li></ul><p>与之对比：</p><ul><li>GCC是一个传统的一体化的编译器，从源代码到可执行文件的整个流程都在GCC源码中实现</li><li>llvm则是将编译流程拆解为多个模块，如IR优化、目标代码生成等，并提供统一的API和库。这样，开发者可以像搭积木一样重用和扩展这些组件，从而更容易的实现新语言和新架构。</li></ul><h3 id="1-3-高度模块化、可重用"><a href="#1-3-高度模块化、可重用" class="headerlink" title="1.3 高度模块化、可重用"></a>1.3 高度模块化、可重用</h3><p>可重用：不同语言的前端（Clang、Rustc、Swiftc 等）都能重用 LLVM 的优化和后端模块；不同硬件平台的后端也能复用 LLVM IR 和优化模块。<br>可扩展：如果需要新的优化策略，可以直接写一个 LLVM Pass 插件，插入到编译管线中，而不需要重写整个编译器。<br>模块化：无论是GCC还是llvm都是模块化的，但是两者的模块化有区别：</p><ul><li>GCC具备工具链层面的模块化（编译、汇编、链接是独立工具），但其编译器内部的前端、中端、后端在源码层面高度耦合，扩展性差。</li><li>LLVM的模块化是从设计之初就在编译器内部架构层面实现的：它将语法分析、IR表示、优化、代码生成等功能全部封装为可重用的库，通过统一的LLVM IR API将各个阶段解耦</li></ul><h2 id="2-llvm-vs-gcc"><a href="#2-llvm-vs-gcc" class="headerlink" title="2. llvm  vs  gcc"></a>2. llvm  vs  gcc</h2><p>相同点：</p><ul><li>两者都是三段式设计，都包含前端、中端以及后端；</li><li>支持多语言多架构；</li><li>都包含各种优化，比如说死代码消除等；</li></ul><p>不同点：</p><ul><li>架构定位：GCC 是传统的一体化编译器，前端、中端、后端代码紧密耦合；LLVM 是编译器基础设施，由一系列库和工具组成，核心通过统一的 LLVM IR 将各模块解耦，可扩展性强。</li><li>中间表示：GCC 使用 GIMPLE 和 RTL 等内部 IR，通常不面向用户暴露；LLVM 使用统一的、平台无关的 LLVM IR（.ll &#x2F; .bc），既能作为编译阶段的桥梁，也能作为持久化和跨语言中间码使用。</li><li>扩展性：GCC 想要新增语言或架构支持，需要对编译器整体进行较大修改；LLVM 可以只实现对应的前端或后端，直接复用中端优化。</li><li>模块化与复用：GCC 的“模块化”更多体现在工具链拆分（如 as、ld 等独立程序），源码内部仍然耦合；LLVM 从设计上就是库级模块化，开发者可以像积木一样组合或替换模块，甚至只复用其中某一部分。</li></ul><h2 id="3-如何理解llvm-IR"><a href="#3-如何理解llvm-IR" class="headerlink" title="3. 如何理解llvm IR"></a>3. 如何理解llvm IR</h2><h3 id="3-1-什么是llvm-IR"><a href="#3-1-什么是llvm-IR" class="headerlink" title="3.1 什么是llvm IR"></a>3.1 什么是llvm IR</h3><p>llvm IR是llvm的中间表示，是前后端的桥梁。假设现在有M种编程语言，有N种目标架构，如果现在没有llvm IR,那么在整套编译器中共需要实现M*N种方法，相当于每出现一种新的编程语言或者说目标架构，都需要一套完整的前后端支持；但是有了llvm IR之后，则不需要，前后端是完全分离的，前端不会影响后端，后端也不会影响前端，此时一共需要M+N种实现。<br>同时，由于llvm IR与目标架构无关，且llvm的优化是针对于llvm IR完成的，所以想要添加一种新的优化pass是非常方便的。</p><h3 id="3-2-llvm-IR分类"><a href="#3-2-llvm-IR分类" class="headerlink" title="3.2 llvm IR分类"></a>3.2 llvm IR分类</h3><p>llvm IR有三种表示方式，分别是.ll格式、.bc格式和内存格式，如下</p><ul><li>.ll格式：类似于GCC中的汇编代码格式，是我们自己能够看懂的汇编语言格式（人类可读，用于调试和学习）</li><li>.bc格式：位代码文件，是由一串0和1组成，我们无法看懂，但是计算机能够看懂（机器可读，用于高效存储和传输）</li><li>内存格式：在整个编译流程中，llvm IR都是这个格式的（编译过程中使用，性能最优）</li></ul><p>其中，.ll格式和.bc格式之间是可以转换的，通过如下命令可实现互相转换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bc文件转为.ll文件</span></span><br><span class="line">llvm-dis hello.bc -o hello.ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.ll文件转为.bc文件</span></span><br><span class="line">llvm-as hello.ll -o hello.bc</span><br></pre></td></tr></table></figure><p>关于llvm IR的详细说明，见后续文章</p><h2 id="4-llvm中编译源程序的整体流程"><a href="#4-llvm中编译源程序的整体流程" class="headerlink" title="4. llvm中编译源程序的整体流程"></a>4. llvm中编译源程序的整体流程</h2><p>llvm将整个编译过程分为前中后端，在这里分别针对三个端做出说明。<br>前端主要用于解析源程序，进行词法、语法、语义分析、静态分析、中间代码生成等步骤，生成llvm IR中间表示。</p><ul><li>词法分析：从左到右遍历源程序字符流，识别出单词符号token。在这个过程采用正则文法，用NFA（非确定有限自动机）-&gt; DFA（确定有限自动机）实现，如 lex 就是这样的实现逻辑；</li><li>语法分析：根据文法规则把token串组织成语法结构，构成<strong>抽象语法树AST</strong>。主要的实现方法有LL(1)与LR(1)，其中LL(1)主要用在教学中，而LR(1)主要用在现在的编译器中。<ul><li>LL(1)：顾名思义，从左到右扫描，采用最左推导，每次向前看一个字符。该方法是一种<strong>自顶向下的预测分析法</strong>，通过预测分析表决定产生式。在实际使用过程中，从起始符号出发，根据预测分析表决定使用的产生式；</li><li>LR(1)：顾名思义，从左到右扫描，采用最右规约，每次向前看一个字符。该方法是一种<strong>自底向上的移近规约法</strong>，通过项目集+移近规约表来驱动分析。在使用过程中，从输入符号串出发，逐步移近token,然后尝试规约到文法符号；</li><li>OPG：算符优先，自底向上，适合算术表达式</li></ul></li><li>语义分析：对语法分析输出的AST进行逻辑判断，进行上下文语义检查，输出任然是AST抽象语法树；</li><li>静态分析：指的是在编译阶段模拟程序执行，裁剪掉不需要执行的代码。常使用的方法是路径敏感；</li><li>中间代码生成：在进行完以上步骤后，则会将AST转换为llvm的中间表示，即llvm IR；</li></ul><p>中端即公共优化器，负责进行与目标架构无关的优化，包括死代码消除、内联等；<br>后端指的是将llvm IR转换为与目标架构相关的表示，比如说汇编代码等。主要进行的是以下工作：</p><ul><li>指令选择：将llvm指令映射到目标机器指令集；</li><li>指令调度：重排指令顺序，以便充分利用流水线；</li><li>寄存器分配：llvm中有许多虚拟寄存器，该阶段的主要作用就是将其映射到目标CPU的物理寄存器中；</li><li>代码优化：针对特定架构进行的优化；</li><li>代码生成：生成汇编代码</li></ul><h3 id="4-1-举例说明"><a href="#4-1-举例说明" class="headerlink" title="4.1 举例说明"></a>4.1 举例说明</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============ 前端 Frontend ============</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">源代码 -&gt; LLVM IR</span></span><br><span class="line">clang++ -fPIE -S -emit-llvm hello.cpp -o hello.ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选: IR 的文本 &lt;-&gt; 二进制互转（不改变内容，只是格式转换）</span></span><br><span class="line">llvm-as hello.ll -o hello.bc     # .ll -&gt; .bc</span><br><span class="line">llvm-dis hello.bc -o hello.ll    # .bc -&gt; .ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============ 中端 Middleend ============</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在中间表示 (IR) 上进行优化（IR 层面，不依赖具体机器）</span></span><br><span class="line">opt -O2 hello.bc -o hello_opt.bc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============ 后端 Backend ============</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">LLVM IR -&gt; 汇编（结合目标架构，做寄存器分配、指令选择、后端优化）</span></span><br><span class="line">llc -O2 -relocation-model=pic hello_opt.bc -o hello_opt.s</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以在这里直接通过指定参数 filetype 指定生成的文件的格式，默认生成的是 .s 汇编文件，通过 -filetype=obj 可指定生成的.o 目标文件，命令如下：</span></span><br><span class="line">llc -O2 -filetype=obj -relocation-model=pic hello_opt.bc -o hello_opt.o</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">汇编 -&gt; 目标文件 (.o)</span></span><br><span class="line">clang++ -fPIE -c hello_opt.s -o hello_opt.o</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目标文件 -&gt; 可执行文件 (链接阶段)</span></span><br><span class="line">clang++ -fPIE hello_opt.o -pie -o hello</span><br></pre></td></tr></table></figure><p>当然，一般情况下，我们不这么使用，因为这样使用的话可能会出现各种各样的问题，最为常见的问题就是未定义符号问题，还有各种库文件不齐全的问题。所以，我们一般会直接使用clang完成编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ hello.cpp -o hello</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
