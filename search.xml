<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Makefile学习</title>
      <link href="/2025/10/14/Makefile%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/10/14/Makefile%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Makefile"><a href="#什么是Makefile" class="headerlink" title="什么是Makefile"></a>什么是Makefile</h1><p>Makefile 是一个用于自动化构建程序的文本文件，它定义了项目的编译规则和依赖关系。通过 make 工具读取 Makefile 并执行其中定义的命令，可以高效地管理项目的构建过程。</p><h1 id="基本语法规则"><a href="#基本语法规则" class="headerlink" title="基本语法规则"></a>基本语法规则</h1><p>基本格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target: dependcies</span><br><span class="line">    command</span><br></pre></td></tr></table></figure><ul><li>target：目标文件或操作名称</li><li>dependcies：target 的依赖文件列表</li><li>command：构建命令，必须以tab键开头</li></ul><p>需要注意的是：make 命令默认执行 Makefile 中第一个出现的目标</p><p>举例如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">hello: main.o utils.o</span></span><br><span class="line">gcc -o hello main.o utils.o</span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">gcc -c main.c</span><br><span class="line"></span><br><span class="line"><span class="section">utils.o: utils.c</span></span><br><span class="line">gcc -c utils.c</span><br></pre></td></tr></table></figure><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Makefile 中的变量可以分为普通变量和自动变量，其中普通变量的格式如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 延迟展开</span></span><br><span class="line">var = value</span><br><span class="line"><span class="comment"># 立即展开</span></span><br><span class="line">var := value</span><br><span class="line"><span class="comment"># 如果未定义，则赋值</span></span><br><span class="line">var ?= value</span><br><span class="line"><span class="comment"># 追加</span></span><br><span class="line">var += more</span><br></pre></td></tr></table></figure><p>举例如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CC := gcc</span><br><span class="line">CFLAGS := -Wall -O2</span><br><span class="line">SRC := main.c util.c</span><br><span class="line">OBJ := $(SRC:.c=.o)</span><br></pre></td></tr></table></figure><p>自动变量指的是在 Makefile 中自动匹配的变量，通常有以下几种表示形式：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 command 命令部分使用</span></span><br><span class="line"><span class="variable">$@</span> — 目标文件名（target）</span><br><span class="line"><span class="variable">$&lt;</span> — 第一个依赖</span><br><span class="line"><span class="variable">$^</span> — 所有依赖（去重后的列表）</span><br><span class="line"><span class="variable">$+</span> — 所有依赖（保留重复）</span><br><span class="line"><span class="variable">$?</span> — 比目标新的依赖文件列表</span><br></pre></td></tr></table></figure><p>举例如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>变量替换，基本格式：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本格式</span></span><br><span class="line"><span class="section">$(VAR:.old_suffix=.new_suffix)</span></span><br><span class="line"><span class="comment"># 举例</span></span><br><span class="line">OBJ := $(SRC:.c=.o)</span><br></pre></td></tr></table></figure><p>这表示：将变量 VAR 中所有以 .old_suffix 结尾的字符串替换为以 .new_suffix 结尾。<br>等价于以下几种写法：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OBJ = $(SRC:%.c=%.o)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法三：</span></span><br><span class="line">OBJ = <span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,<span class="variable">$(SRC)</span>)</span></span><br></pre></td></tr></table></figure><h2 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h2><p>伪目标一般指的是不代表实际文件名的目标，只代表要执行的操作，以 <code>.PHONY</code> 开头，举例如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f *.o</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean</span></span><br></pre></td></tr></table></figure><p>在这里，clean 就是一个伪目标，不生成 clean 文件，只执行清理操作。</p><h1 id="模式规则"><a href="#模式规则" class="headerlink" title="模式规则"></a>模式规则</h1><p>模式规则是一种通用规则，通过使用通配符 <code>%</code> 来匹配文件名，定义了如何从一种类型的文件构建另一种类型的文件。基本语法如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">%.target: %.dependency</span></span><br><span class="line">commands</span><br></pre></td></tr></table></figure><p>这里的 % 匹配任意非空字符串。当目标文件（target）和依赖文件（dependency）都包含%时，它们会匹配相同的部分。</p><h2 id="通用规则"><a href="#通用规则" class="headerlink" title="通用规则"></a>通用规则</h2><p>用 <code>%</code> 表示模式，一般用于匹配 <code>target: dependics</code>，举例如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">&lt;TAB&gt; <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>这个规则表示：任何.o文件依赖于对应的.c文件。编译命令使用$&lt;（第一个依赖文件）和$@（目标文件）</p><h2 id="静态模式规则"><a href="#静态模式规则" class="headerlink" title="静态模式规则"></a>静态模式规则</h2><p>静态模式规则是模式规则的一种，只适用于指定的目标列表，规定了如何从依赖文件中构建特定的一组目标，基本语法如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">targets ...: target-pattern: dependency-pattern</span><br><span class="line">commands</span><br></pre></td></tr></table></figure><ul><li>targets：目标文件列表，这个规则只适用于这些目标。</li><li>target-pattern：目标模式，用于从目标列表中提取出词干（stem）。</li><li>dependency-pattern：依赖模式，使用目标模式中提取的词干来形成依赖。</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OBJECTS = main.o utils.o</span><br><span class="line"></span><br><span class="line"><span class="variable">$(OBJECTS)</span>: %.o: %.c</span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>这个规则表示：对于OBJECTS变量中的每个.o文件，它们依赖于对应的.c文件。注意，这里的%.o和%.c中的%部分必须相同。</p><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(DEBUG)</span>, 1)</span><br><span class="line">    CFLAGS += -DDEBUG -g</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    CFLAGS += -O2</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配文件    $(wildcard pattern)</span></span><br><span class="line">SOURCES = <span class="variable">$(<span class="built_in">wildcard</span> src/*.c)</span>   <span class="comment"># 获取 src 目录下的 .c 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模式替换    $(patsubst pattern,repl,text)</span></span><br><span class="line">OBJECTS = <span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,<span class="variable">$(SOURCES)</span>)</span>    <span class="comment"># 将所有的 .c 文件替换为 .o 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通字符串替换    $(subst from,to,text)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">subst</span> src/,build/,<span class="variable">$(SRC)</span>)</span>         <span class="comment"># 将 $(SRC) 里面的 src/ 替换成 build/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉文件扩展名    $(basename names)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">basename</span> main.c)</span> → main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉路径部分      $(notdir names)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">notdir</span> src/main.c)</span> → main.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取路径部分      $(dir names)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">dir</span> src/main.c)</span> → src/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为每项添加前缀        $(addprefix prefix,names)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">addprefix</span> -I,src include)</span>     <span class="comment"># 给每一个 src 和 include 之前添加 -I</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为每项添加后缀        $(addsuffix suffix,names)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">addsuffix</span> .o,main util)</span>       <span class="comment"># 给 main 和 util 之后添加 .o</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按模式过滤            $(filter pattern,text)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">filter</span> %.c,<span class="variable">$(FILES)</span>)</span>          <span class="comment"># 过滤掉 $(FILES) 中的 所有 .c 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤掉匹配项          $(filter-out pattern,text)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">filter</span>-out test_%,<span class="variable">$(SRC)</span>)</span>     <span class="comment"># 过滤掉 $(SRC) 中的以 test_ 开头的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重并排序            $(sort list)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">sort</span> <span class="variable">$(SRC)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历循环              $(foreach var,list,body)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">foreach</span> f,<span class="variable">$(SRC)</span>,$(info <span class="built_in">file</span>: <span class="variable">$(f)</span>)</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行shell命令         $(shell cmd)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">shell</span> mkdir -p build)</span></span><br></pre></td></tr></table></figure><h2 id="自动依赖生成"><a href="#自动依赖生成" class="headerlink" title="自动依赖生成"></a>自动依赖生成</h2><p>在 C&#x2F;C++ 项目中，当头文件改变时，需要重新编译依赖该头文件的源文件。动维护这些依赖关系非常困难，有时会忘记所谓的依赖关系，即这个 .o 依赖于那些文件，此时就出现了自动依赖生成。核心代码如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS += -MMD -MP</span><br><span class="line">OBJ := $(SRC:.c=.o)     <span class="comment"># 它的意思是将 SRC 中所有以 .c 结尾的字符串替换成以 .o 结尾</span></span><br><span class="line">DEPS := $(OBJ:.o=.d)    </span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">-include</span> <span class="variable">$(DEPS)</span></span><br></pre></td></tr></table></figure><p>假设 SRC &#x3D; main.c utils.c 则 OBJ &#x3D; main.o utils.o 且 DEPS &#x3D; main.d utils.d<br>然后，在编译过程中，我们会为每个 .c 文件生成一个 .o 文件和一个 .d 文件。.d 文件中记录了该 .c 文件所依赖的头文件。当这些头文件发生变化时，通过包含 .d 文件，make 就会知道需要重新编译对应的 .o 文件。</p><h2 id="彩色输出"><a href="#彩色输出" class="headerlink" title="彩色输出"></a>彩色输出</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义颜色</span></span><br><span class="line">RED := \033[0;31m</span><br><span class="line">GREEN := \033[0;32m</span><br><span class="line">YELLOW := \033[0;33m</span><br><span class="line">NC := \033[0m <span class="comment"># No Color</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">@printf <span class="string">&quot;<span class="variable">$(GREEN)</span>Compiling<span class="variable">$(NC)</span> <span class="variable">$&lt;</span>\n&quot;</span></span><br><span class="line">@<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">@printf <span class="string">&quot;<span class="variable">$(YELLOW)</span>Cleaning...<span class="variable">$(NC)\n</span>&quot;</span></span><br><span class="line">rm -rf build</span><br></pre></td></tr></table></figure><p>这里的 <code>@</code> 符号的主要作用是：不显示命令本身，比如说不显示上面的 printf</p>]]></content>
      
      
      <categories>
          
          <category> 工具与构建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>llvm初勘之.ll文件内容分析</title>
      <link href="/2025/10/13/llvm%E5%88%9D%E5%8B%98%E4%B9%8B.ll%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%88%86%E6%9E%90/"/>
      <url>/2025/10/13/llvm%E5%88%9D%E5%8B%98%E4%B9%8B.ll%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://firstheart09.github.io/2025/10/08/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bllvm%20IR%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/">llvm初勘之llvm IR简单介绍</a>一文中讲到， llvm IR 有三种重要表示形式，分别是人类可读形式<code>.ll</code>文件格式，<code>.bc</code>位代码文件格式以及内存格式，其中要想理解 llvm IR 中间表示，需要理解<code>.ll</code>文件格式。<br>一个<code>C</code>程序中最常见的就是变量和函数，那么相应的，<code>.ll</code>文件格式中最常见的也应该是变量和函数，以下面的测试代码为例，分析<code>.ll</code>文件内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="type">int</span> g_counter = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态全局变量（只在本文件可见）</span></span><br><span class="line"><span class="type">static</span> <span class="type">double</span> g_ratio = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带循环和条件的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum_to_n</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            sum += i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum += i * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">p</span> =</span> &#123;<span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> result = add(p.x, p.y);</span><br><span class="line">    <span class="type">int</span> total = sum_to_n(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result = %d, total = %d, counter = %d, ratio = %.2f\n&quot;</span>,</span><br><span class="line">           result, total, g_counter, g_ratio);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先查看没有任何优化级别的<code>.ll</code>文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID = &#x27;test.c&#x27;</span><br><span class="line">source_filename = &quot;test.c&quot;</span><br><span class="line">target datalayout = &quot;e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple = &quot;x86_64-unknown-linux-gnu&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">struct.Point = <span class="built_in">type</span> &#123; i32, i64 &#125;</span></span><br><span class="line"></span><br><span class="line">@g_counter = dso_local global i32 10, align 4</span><br><span class="line">@__const.main.p = private unnamed_addr constant &#123; i32, [4 x i8], i64 &#125; &#123; i32 3, [4 x i8] zeroinitializer, i64 4 &#125;, align 8</span><br><span class="line">@.str = private unnamed_addr constant [53 x i8] c&quot;result = %d, total = %d, counter = %d, ratio = %.2f\0A\00&quot;, align 1</span><br><span class="line">@g_ratio = internal global double 3.140000e+00, align 8</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i32 @add(i32 noundef %a, i32 noundef %b) #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">a.addr = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">b.addr = alloca i32, align 4</span></span><br><span class="line">  store i32 %a, ptr %a.addr, align 4</span><br><span class="line">  store i32 %b, ptr %b.addr, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %a.addr, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">1 = load i32, ptr %b.addr, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">add = add nsw i32 %0, %1</span></span><br><span class="line">  ret i32 %add</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i32 @sum_to_n(i32 noundef %n) #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">n.addr = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash"><span class="built_in">sum</span> = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">i = alloca i32, align 4</span></span><br><span class="line">  store i32 %n, ptr %n.addr, align 4</span><br><span class="line">  store i32 0, ptr %sum, align 4</span><br><span class="line">  store i32 1, ptr %i, align 4</span><br><span class="line">  br label %for.cond</span><br><span class="line"></span><br><span class="line">for.cond:                                         ; preds = %for.inc, %entry</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %i, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">1 = load i32, ptr %n.addr, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">cmp = icmp sle i32 %0, %1</span></span><br><span class="line">  br i1 %cmp, label %for.body, label %for.end</span><br><span class="line"></span><br><span class="line">for.body:                                         ; preds = %for.cond</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">2 = load i32, ptr %i, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">rem = srem i32 %2, 2</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">cmp1 = icmp eq i32 %rem, 0</span></span><br><span class="line">  br i1 %cmp1, label %if.then, label %if.else</span><br><span class="line"></span><br><span class="line">if.then:                                          ; preds = %for.body</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">3 = load i32, ptr %i, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">4 = load i32, ptr %<span class="built_in">sum</span>, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">add = add nsw i32 %4, %3</span></span><br><span class="line">  store i32 %add, ptr %sum, align 4</span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.else:                                          ; preds = %for.body</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">5 = load i32, ptr %i, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">mul = mul nsw i32 %5, 2</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">6 = load i32, ptr %<span class="built_in">sum</span>, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">add2 = add nsw i32 %6, %mul</span></span><br><span class="line">  store i32 %add2, ptr %sum, align 4</span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.end:                                           ; preds = %if.else, %if.then</span><br><span class="line">  br label %for.inc</span><br><span class="line"></span><br><span class="line">for.inc:                                          ; preds = %if.end</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">7 = load i32, ptr %i, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">inc = add nsw i32 %7, 1</span></span><br><span class="line">  store i32 %inc, ptr %i, align 4</span><br><span class="line">  br label %for.cond, !llvm.loop !6</span><br><span class="line"></span><br><span class="line">for.end:                                          ; preds = %for.cond</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">8 = load i32, ptr %<span class="built_in">sum</span>, align 4</span></span><br><span class="line">  ret i32 %8</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i32 @main() #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">retval = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">p = alloca %struct.Point, align 8</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">result = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">total = alloca i32, align 4</span></span><br><span class="line">  store i32 0, ptr %retval, align 4</span><br><span class="line">  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %p, ptr align 8 @__const.main.p, i64 16, i1 false)</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">x = getelementptr inbounds nuw %struct.Point, ptr %p, i32 0, i32 0</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %x, align 8</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">y = getelementptr inbounds nuw %struct.Point, ptr %p, i32 0, i32 1</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">1 = load i64, ptr %y, align 8</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">conv = trunc i64 %1 to i32</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = call i32 @add(i32 noundef %0, i32 noundef %conv)</span></span><br><span class="line">  store i32 %call, ptr %result, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call1 = call i32 @sum_to_n(i32 noundef 5)</span></span><br><span class="line">  store i32 %call1, ptr %total, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">2 = load i32, ptr %result, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">3 = load i32, ptr %total, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">4 = load i32, ptr @g_counter, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">5 = load double, ptr @g_ratio, align 8</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call2 = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str, i32 noundef %2, i32 noundef %3, i32 noundef %4, double noundef %5)</span></span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)</span><br><span class="line">declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #1</span><br><span class="line"></span><br><span class="line">declare i32 @printf(ptr noundef, ...) #2</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone uwtable &quot;frame-pointer&quot;=&quot;all&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br><span class="line">attributes #1 = &#123; nocallback nofree nounwind willreturn memory(argmem: readwrite) &#125;</span><br><span class="line">attributes #2 = &#123; &quot;frame-pointer&quot;=&quot;all&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br><span class="line"></span><br><span class="line">!llvm.module.flags = !&#123;!0, !1, !2, !3, !4&#125;</span><br><span class="line">!llvm.ident = !&#123;!5&#125;</span><br><span class="line"></span><br><span class="line">!0 = !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!1 = !&#123;i32 8, !&quot;PIC Level&quot;, i32 2&#125;</span><br><span class="line">!2 = !&#123;i32 7, !&quot;PIE Level&quot;, i32 2&#125;</span><br><span class="line">!3 = !&#123;i32 7, !&quot;uwtable&quot;, i32 2&#125;</span><br><span class="line">!4 = !&#123;i32 7, !&quot;frame-pointer&quot;, i32 2&#125;</span><br><span class="line">!5 = !&#123;!&quot;clang version 22.0.0git (git@github.com:llvm/llvm-project.git c410e88f0f8c0654d7744d6d029009f9cb736143)&quot;&#125;</span><br><span class="line">!6 = distinct !&#123;!6, !7&#125;</span><br><span class="line">!7 = !&#123;!&quot;llvm.loop.mustprogress&quot;&#125;</span><br></pre></td></tr></table></figure><p>上面的输出信息，大致上可以分为两个部分：目标架构相关，函数变量相关。</p><h1 id="目标架构信息"><a href="#目标架构信息" class="headerlink" title="目标架构信息"></a>目标架构信息</h1><p><code>.ll</code>文件开头几行表明模块与目标架构信息，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID = &#x27;test.c&#x27;</span><br><span class="line">source_filename = &quot;test.c&quot;</span><br><span class="line">target datalayout = &quot;e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple = &quot;x86_64-unknown-linux-gnu&quot;</span><br></pre></td></tr></table></figure><p>其中，以<code>;</code>开头的是注释，相当于<code>C/C++</code>中的单行注释，需要注意的是：** llvm IR 只存在单行注释，没有所谓的多行注释和文档注释**。</p><ul><li><code>ModuleID</code>说明此.ll文件的模块ID，用于标识此.ll文件的唯一性，后续编译器通过这个来进行区分模块；</li><li><code>source_filename</code>：表明该.ll文件是由哪个源文件编译得到，在这里，是由test.c源文件编译得到；</li><li><code>target triple</code>：<strong>描述目标机器信息的三元组，通常格式为 <code>&lt;arch&gt;-&lt;vendor&gt;-&lt;os&gt;[-&lt;abi&gt;]</code></strong>（例如 <code>x86_64-unknown-linux-gnu</code>）。<code>triple</code>决定目标平台&#x2F;ABI（以及编译器应使用的数据模型，如 LP64 vs LLP64），进而影响各种数据类型（如long）应映射到多少位宽的IR类型（i32或i64）。</li><li><code>target datalayout</code>：<strong>定义目标机器的字节序、各类类型的对齐与大小规则、指针宽度&#x2F;对齐、原生整数宽度、栈对齐等底层布局细节</strong>。它由若干以<code>-</code>分隔的段组成，如下：<ul><li>典型格式为：<strong>[&lt;端序&gt;]-[&lt;符号修饰规则&gt;]-[&lt;类型1&gt;:&lt;大小&gt;:&lt;对齐&gt;:&lt;首选对齐&gt;]-…</strong>；</li><li>这里所说的类型指的是数据类型，如 p 代表指针，f 代表浮点数、i 代表整型，s 代表栈等等；</li></ul></li></ul><p>总结如下，<code>target datalayout</code>决定的是每种位宽的布局规则；而<code>target triple</code>决定数据类型（int&#x2F;long&#x2F;pointer）映射到哪种位宽。</p><p>对应上面的输出，详细解释如下：</p><ul><li><code>e</code>：内存存储模式为小端模式，字节的最低有效位存储在最低地址，对应的大端序为 E；</li><li><code>m:e</code>：使用 elf 文件风格；</li><li><code>p270:32:32</code>：表示第 270 地址空间的指针为 32 位宽，按 4 字节对齐；</li><li><code>p271:32:32</code>：同上</li><li><code>p272:64:64</code>：表示第 272 地址空间的指针为 64 位宽，按 8 字节对齐；</li><li><code>i64:64</code>：64 位整数按 64 位（8 字节）对齐；</li><li><code>i128:128</code>：128 位整数按 16 字节对齐；</li><li><code>f80:128</code>：80位浮点数按照16字节对齐；</li><li><code>n8:16:32:64</code>：目标原生整数宽度为 8、16、32、64 位（告诉后端哪些宽度的整型操作是“原生”高效的）；</li><li><code>S128</code>：栈对齐为 128 位</li></ul><p>针对上面的 C 文件，结构体中的 long 类型映射的关键点如下：</p><ul><li>target datalayout 本身定义了每个位宽（ i32&#x2F;i64&#x2F;… ）在内存中的对齐与布局规则，但它并不直接说明 long 是 i32 还是 i64 。</li><li>决定 C 基本类型（int&#x2F;long&#x2F;指针）映射到哪个位宽（如 long → i64 或 i32）的是目标平台的数据模型&#x2F;ABI，这由 target triple（以及编译器前端对该 triple 的理解）确定。</li></ul><h1 id="ll文件内容解释"><a href="#ll文件内容解释" class="headerlink" title=".ll文件内容解释"></a>.ll文件内容解释</h1><p>.ll 文件中的内容可以理解为标识符（数据）和命令（操作）的组合，所以如何正确分辨出 .ll 文件中的标识符是非常重要的。<br>在 llvm IR 中，标识符以前缀开头（可以避免出现名字冲突，未命名的标识符可以快速声明一个临时变量，避免符号表索引冲突），其中以<code>%</code>开头的是局部标识符，以<code>@</code>开头的是全局标识符。<br>局部标识符按照是否命名可分为已命名局部标识符（%temp）、未命名局部标识符（%1，带前缀的无符号数字表示）；按照分配方式分类，可分为寄存器分配的局部标识符（一般是指指令返回结果的局部变量）、栈分配的局部变量（通过<code>alloca</code>在栈帧上分配的变量）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@g_counter = dso_local global i32 10, align 4</span><br><span class="line">@__const.main.p = private unnamed_addr constant &#123; i32, [4 x i8], i64 &#125; &#123; i32 3, [4 x i8] zeroinitializer, i64 4 &#125;, align 8</span><br><span class="line">@.str = private unnamed_addr constant [53 x i8] c&quot;result = %d, total = %d, counter = %d, ratio = %.2f\0A\00&quot;, align 1</span><br><span class="line">@g_ratio = internal global double 3.140000e+00, align 8</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i32 @add(i32 noundef %a, i32 noundef %b) #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">a.addr = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">b.addr = alloca i32, align 4</span></span><br><span class="line">  store i32 %a, ptr %a.addr, align 4</span><br><span class="line">  store i32 %b, ptr %b.addr, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %a.addr, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">1 = load i32, ptr %b.addr, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">add = add nsw i32 %0, %1</span></span><br><span class="line">  ret i32 %add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令指的是类似于 add 这样的汇编指令，表示此时执行的是相加操作。<br>可以看到，<code>g_counter</code>就是一个全局标识符，即一个数据，该数据位于数据区（<code>.data/.bss/.rodata</code>节区）中。</p><h2 id="llvm-IR中的数据"><a href="#llvm-IR中的数据" class="headerlink" title="llvm IR中的数据"></a>llvm IR中的数据</h2><p>在 llvm IR 中，数据分为三类：寄存器中的数据（以<code>%</code>开头的数据）、栈上的数据（通过<code>alloca</code>分配的数据）、数据区中的数据（以<code>@</code>开头的数据）。至于堆上的数据，比如说，使用<code>new</code>分配的数据，该数据保存在堆上，但是实际上在栈上有指针指向堆中的数据。这些数据根据其链接性和可见性会进行不同的处理，通过<code>llvm-readelf</code>和<code>llvm-nm</code>可以查看数据对应的不同的符号。 </p><h3 id="llvm-IR中的寄存器数据"><a href="#llvm-IR中的寄存器数据" class="headerlink" title="llvm IR中的寄存器数据"></a>llvm IR中的寄存器数据</h3><p>由于目标平台的寄存器数量有限，所以 llvm 提供了虚拟寄存器，通过虚拟寄存器可以解决物理寄存器个数不够的问题。在 llvm 中，以<code>%</code>开头的标识符就是寄存器。比如说上面例子中的<code>%a</code>和<code>%b</code>就是两个虚拟寄存器。<br>在不同的<code>ABI</code>下，会有一些被调用者保存寄存器和调用者保存寄存器。简单的讲，就是在某些情况下，寄存器中的值不能改变，尤其是在函数调用刚进入和完成时，部分寄存器中的值不能改变。<br>llvm IR对寄存器的使用：</p><ul><li>当所需寄存器数量较少时，直接使用被调用者保存寄存器，即不需要保留的寄存器；</li><li>当被调用者保存寄存器不够时，将调用者保存寄存器原本的值压栈，然后使用调用者保存寄存器；</li><li>当寄存器用光之后，就把虚拟寄存器的值压栈；</li></ul><h3 id="llvm-IR中的栈上的数据"><a href="#llvm-IR中的栈上的数据" class="headerlink" title="llvm IR中的栈上的数据"></a>llvm IR中的栈上的数据</h3><p>在 llvm 中，通过<code>alloca</code>在当前函数的栈帧上分配空间，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">a.addr = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">b.addr = alloca i32, align 4</span></span><br><span class="line">store i32 %a, ptr %a.addr, align 4</span><br><span class="line">store i32 %b, ptr %b.addr, align 4</span><br></pre></td></tr></table></figure><p>表明通过<code>alloca</code>分配了两个<code>i32</code>类型数据（32位整数，按4字节对齐），<code>%a.addr</code>和<code>%b.addr</code>就是典型的栈数据，这两个数据实际上保存的是地址值，后续通过<code>ptr %a.addr</code>和<code>ptr %b.addr</code>获取该地址对应的值。</p><h3 id="llvm-IR中的数据区的数据"><a href="#llvm-IR中的数据区的数据" class="headerlink" title="llvm IR中的数据区的数据"></a>llvm IR中的数据区的数据</h3><p>在 llvm 中，数据区通常指的是<code>.data/.rodata/.bss（linux环境中）</code>节区中的数据，这些数据以<code>@</code>符号作为前缀，表明该符号是一个全局符号。如上面的<code>@g_counter</code>就是存放在数据区中的数据，该数据位于<code>.data</code>节区中，可以通过<code>llvm-nm</code>进行查看，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000000003aa8 D g_counter</span><br></pre></td></tr></table></figure><p>与此同时，<code>@main</code>也是存放在数据区中的数据，该数据是一个函数，也可以通过<code>llvm-nm</code>进行查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00000000000017f0 T main</span><br></pre></td></tr></table></figure><h2 id="llvm-IR中符号的链接性和可见性"><a href="#llvm-IR中符号的链接性和可见性" class="headerlink" title="llvm IR中符号的链接性和可见性"></a>llvm IR中符号的链接性和可见性</h2><p>我们知道，全局变量&#x2F;函数可以被调用，而局部变量只对当前函数内部具有生命周期。那么此时如果程序中有多个<code>.c</code>文件被编译成<code>.o</code>文件时，链接器会将这些文件拼接到一起，这时就会有一个问题：同名变量或函数怎么办？需要合并吗？要不要导出去，让别人也能够使用？别人能不能覆盖该符号？<br>为了解决这个问题，提出了<strong>链接性（告诉编译器&#x2F;链接器，当前正在拼接的符号需要怎么处理）</strong>，<strong>可见性（告诉动态链接器，程序运行时，别的.so能不能看到我）</strong>。</p><h3 id="llvm-IR中的链接性"><a href="#llvm-IR中的链接性" class="headerlink" title="llvm IR中的链接性"></a>llvm IR中的链接性</h3><p>以如下信息为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@g_counter = dso_local global i32 10, align 4</span><br><span class="line">@__const.main.p = private unnamed_addr constant &#123; i32, [4 x i8], i64 &#125; &#123; i32 3, [4 x i8] zeroinitializer, i64 4 &#125;, align 8</span><br><span class="line">@.str = private unnamed_addr constant [53 x i8] c&quot;result = %d, total = %d, counter = %d, ratio = %.2f\0A\00&quot;, align 1</span><br><span class="line">@g_ratio = internal global double 3.140000e+00, align 8</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i32 @add(i32 noundef %a, i32 noundef %b) #0 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>external</code>：默认链接类型<br>符号对外部可见，可以被其他模块引用。如果多个模块定义了同名的<code>external</code>符号，则会报错。<br>如上面的<code>g_counter</code>就是<code>external</code>类型的，表示形式：<code>dso_local</code>，说明该符号是外部可见的，可被引用的，比如说可以在另一个<code>.c</code>文件中，可以通过<code>external int g_counter</code>从而实现调用。<br><code>external_weak</code>是<code>external</code>类型的，但是符号在链接之前是弱符号，如果未链接，则符号变为null，而不是未定义的引用。</li><li><code>internal/private</code>：只对本模块生效，其他模块不能调用<br>这两个属性表明符号只能在本模块内部使用，是本模块私有的，其他模块不能使用。<br>其中<code>private</code>属性表明该符号是私有的，一般字符串字面量就是该类型，比如说上面的<code>@.str</code>就是典型的字符串字面量，也就是该类型。该符号不能被<code>llvm-nm/llvm-readelf</code>查看；<br><code>internal</code>类型在<code>private</code>的基础上可以被<code>llvm-nm/llvm-readelf</code>工具查看 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000000003ab0 d g_ratio</span><br></pre></td></tr></table></figure>除了这些链接属性外，还有其他不常用的属性，如下：</li><li><code>weak/common</code>：有强符号就用强符号，该属性的符号可以被其他同名符号覆盖；</li><li><code>linkonce_odr/weak_odr</code>：类似于<code>weak/common</code>，但是遵守<code>ODR</code>，在llvm中会被合并成一个</li></ol><h3 id="llvm-IR中的可见性"><a href="#llvm-IR中的可见性" class="headerlink" title="llvm IR中的可见性"></a>llvm IR中的可见性</h3><p>可见性指的是在运行时其他模块能不能看到该符号，常见的可见性有以下几种：</p><ol><li>default：默认可见性，一般会缺省<br>其他模块的动态库和可执行文件可以看到该符号，并且可以覆盖该符号，如下： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@func = external global i32        ; 默认</span><br></pre></td></tr></table></figure></li><li>hidden：<br>此符号只在当前模块中可见，外部模块不可见。<br>即使别的模块有同名符号，也不会覆盖我 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@func = hidden global i32</span><br></pre></td></tr></table></figure></li><li>protected：<br>符号可以被其他模块访问，但不能被覆盖。举例如下： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@func = protected global i32</span><br></pre></td></tr></table></figure></li></ol><h2 id="llvm-IR类型系统"><a href="#llvm-IR类型系统" class="headerlink" title="llvm IR类型系统"></a>llvm IR类型系统</h2><p>在 llvm 中，函数和数据有不同的类型，这些类型决定变量的类型和函数的参数类型以及返回值类型等信息，用于表明数据是怎样的。</p><h3 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h3><p>类型系统是 llvm IR 最重要的特性之一，强类型有利于在 llvm IR 上开启大量优化。常用的类型总结如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">void类型：通常用于函数返回值或者函数的参数列表</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">整型类型：iN（N就是整数的位宽）</span></span><br><span class="line">i32     # 32位的整数</span><br><span class="line">i64     # 64位的整数</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指针类型：&lt;<span class="built_in">type</span>&gt; *</span>  </span><br><span class="line">ptr     # 所有的指针都使用这个</span><br><span class="line">[ 4 x i32 ] *   # 4个i32类型的整型指针</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浮点数类型</span></span><br><span class="line">float   # 32位浮点数</span><br><span class="line">double  # 64位浮点数</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">向量类型：用于单个指令并行操作多个基本数据SIMD</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt; &lt;# elements&gt; x &lt;elementtype&gt; &gt;  <span class="comment"># 定长向量</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt; vscale x &lt;# elements&gt; x &lt;elementtype&gt; &gt; <span class="comment"># 可伸缩向量</span></span></span><br><span class="line">&lt; 4 x i32 &gt;     # 4个i32类型的向量</span><br><span class="line">&lt; vscale x 4 x i32 &gt;    # 4个i32类型的向量的整数倍</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数组类型：[ &lt;# elements&gt; x &lt;elementtype&gt; ]</span></span><br><span class="line">[ 40 x i32 ]        # 40个i32类型的整型数组</span><br><span class="line">[ 3 x 4 x i32 ]     # 3x4个i32类型的整形数组</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结构体类型：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">type</span> &#123; &lt;<span class="built_in">type</span> list&gt; &#125;  <span class="comment"># 一般结构体</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">type</span> &lt;&#123; &lt;<span class="built_in">type</span> list&gt; &#125;&gt;    <span class="comment"># 稠密结构体</span></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">struct.Point = <span class="built_in">type</span> &#123; i32, i64 &#125;   <span class="comment"># 一个结构体，该结构体中有两个变量，一个是i32类型整型数，一个是i64类型整型数</span></span></span><br></pre></td></tr></table></figure><h3 id="属性-vs-元数据"><a href="#属性-vs-元数据" class="headerlink" title="属性 vs 元数据"></a>属性 vs 元数据</h3><p>属性和元数据都是 llvm IR 中用于附加信息的机制，但是两种有不同的用法。<br>属性一般用在函数上，当然，一个函数也不会只有一个属性，所以属性一般是以组的形式出现的，在使用过程中通过<code>#N</code>（N就是组号）指定该函数使用的属性组，这些属性负责控制该函数、参数、返回值的行为，影响代码生成、优化等。<strong>函数的属性可以在前后端之间传递函数的信息，例如前端发现某个函数需要后端的特殊处理，就给这个函数追加一个自定义的属性</strong>。在<strong>llvm的整个管线中的任意一个位置，都可以读取这个属性，从而根据这个属性进行特殊的优化或者处理</strong>。<br>如下，这就是典型的属性组的定义，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">attributes #0 = &#123; noinline nounwind optnone uwtable &quot;frame-pointer&quot;=&quot;all&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br><span class="line">attributes #1 = &#123; nocallback nofree nounwind willreturn memory(argmem: readwrite) &#125;</span><br><span class="line">attributes #2 = &#123; &quot;frame-pointer&quot;=&quot;all&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br></pre></td></tr></table></figure><p>在函数定义中，在后面通过 <code>#N</code> 表明函数使用的属性组，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define dso_local i32 @main() #0</span><br></pre></td></tr></table></figure><p><code>main</code>函数的属性组为组0，表示该函数不能内联（<code>noinline</code>）等等。</p><p>元数据则不同，它是一种描述性信息，通过<code>!</code>开头的信息就是元数据。这些元数据携带附加信息，将其传递给 llvm 后端，<strong>元数据一般会用作调试信息使用，同时也可以维护控制流的完整性</strong>。如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">!0 = !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!1 = !&#123;i32 8, !&quot;PIC Level&quot;, i32 2&#125;</span><br><span class="line">!2 = !&#123;i32 7, !&quot;PIE Level&quot;, i32 2&#125;</span><br><span class="line">!3 = !&#123;i32 7, !&quot;uwtable&quot;, i32 2&#125;</span><br><span class="line">!4 = !&#123;i32 7, !&quot;frame-pointer&quot;, i32 2&#125;</span><br><span class="line">!5 = !&#123;!&quot;clang version 22.0.0git (git@github.com:llvm/llvm-project.git c410e88f0f8c0654d7744d6d029009f9cb736143)&quot;&#125;</span><br><span class="line">!6 = distinct !&#123;!6, !7&#125;</span><br><span class="line">!7 = !&#123;!&quot;llvm.loop.mustprogress&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="llvm-IR控制语句"><a href="#llvm-IR控制语句" class="headerlink" title="llvm IR控制语句"></a>llvm IR控制语句</h2><p>在编程语言中，常见的控制语句有<code>if-else、for、while/switch</code>等，针对这些， llvm IR 有对应的处理方式。如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i32 @sum_to_n(i32 noundef %n) #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">n.addr = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash"><span class="built_in">sum</span> = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">i = alloca i32, align 4</span></span><br><span class="line">  store i32 %n, ptr %n.addr, align 4</span><br><span class="line">  store i32 0, ptr %sum, align 4</span><br><span class="line">  store i32 1, ptr %i, align 4</span><br><span class="line">  br label %for.cond</span><br><span class="line"></span><br><span class="line">for.cond:                                         ; preds = %for.inc, %entry</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %i, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">1 = load i32, ptr %n.addr, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">cmp = icmp sle i32 %0, %1</span></span><br><span class="line">  br i1 %cmp, label %for.body, label %for.end</span><br><span class="line"></span><br><span class="line">for.body:                                         ; preds = %for.cond</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">2 = load i32, ptr %i, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">rem = srem i32 %2, 2</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">cmp1 = icmp eq i32 %rem, 0</span></span><br><span class="line">  br i1 %cmp1, label %if.then, label %if.else</span><br><span class="line"></span><br><span class="line">if.then:                                          ; preds = %for.body</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">3 = load i32, ptr %i, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">4 = load i32, ptr %<span class="built_in">sum</span>, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">add = add nsw i32 %4, %3</span></span><br><span class="line">  store i32 %add, ptr %sum, align 4</span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.else:                                          ; preds = %for.body</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">5 = load i32, ptr %i, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">mul = mul nsw i32 %5, 2</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">6 = load i32, ptr %<span class="built_in">sum</span>, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">add2 = add nsw i32 %6, %mul</span></span><br><span class="line">  store i32 %add2, ptr %sum, align 4</span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.end:                                           ; preds = %if.else, %if.then</span><br><span class="line">  br label %for.inc</span><br><span class="line"></span><br><span class="line">for.inc:                                          ; preds = %if.end</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">7 = load i32, ptr %i, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">inc = add nsw i32 %7, 1</span></span><br><span class="line">  store i32 %inc, ptr %i, align 4</span><br><span class="line">  br label %for.cond, !llvm.loop !6</span><br><span class="line"></span><br><span class="line">for.end:                                          ; preds = %for.cond</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">8 = load i32, ptr %<span class="built_in">sum</span>, align 4</span></span><br><span class="line">  ret i32 %8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上 llvm IR 对应于上述代码中的<code>sum_to_n</code>函数。可以看到，有以下几个重点：标签、比较指令、条件跳转、无条件跳转、switch、select等。</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>标签是以<code>:</code>结尾的标识符，<code>for.cond</code>、<code>for.body</code>、<code>if.then</code>、<code>if.else</code>之类的就是 llvm IR 中的标签，这些标签用于控制整个跳转流程，比如说<code>br label %if.end</code>就表明无条件跳转到<code>%if.end</code>标签处。</p><h3 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h3><p>上述例子中，<code>icmp</code>就是比较指令，该指令通过比较两个数，返回一个<code>i1</code>类型的值，也就是<code>bool</code>值，进而判断跳转位置。<br>指令有三个参数，解释如下：</p><ul><li>比较方案</li><li>比较的两个数</li></ul><p>举例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">cmp = icmp sle i32 %0, %1</span></span><br></pre></td></tr></table></figure><p>在这里，<code>sle</code>就是比较方案，指的是无符号小于等于，后续的<code>%0</code>和<code>%1</code>就是要比较的两个数。<br>常见的比较方案如下：</p><ul><li><code>eq</code>和<code>ne</code>：相等于不相等；</li><li><code>ugt/uge/ult/ule</code>：无符号大于&#x2F;大于等于&#x2F;小于&#x2F;小于等于；</li><li><code>sgt/sge/slt/sle</code>：有符号大于&#x2F;大于等于&#x2F;小于&#x2F;小于等于；</li></ul><h3 id="条件跳转"><a href="#条件跳转" class="headerlink" title="条件跳转"></a>条件跳转</h3><p>通过上述比较指令完成比较后，根据<code>icmp</code>指令的返回值（<code>true/false</code>）进行跳转。<br> llvm IR 中提供的跳转指令是<code>br</code>，该指令接收三个参数，如下：</p><ul><li>i1类型的值，后续跳转的依据，用作判断；</li><li>当为<code>true</code>的时候，跳转到第1个标签位置；否则跳转到第2个标签位置；</li></ul><p>举例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">br i1 %cmp, label %for.body, label %for.end</span><br></pre></td></tr></table></figure><p>在这里，<code>i1 %cmp</code>就是前面使用<code>icmp</code>指令比较的结果，后续的<code>label %for.body</code>就是比较结果为<code>true</code>的时候要跳转的标签位置；<code>label %for.end</code>就是比较结果为<code>false</code>时要跳转的标签位置。</p><h3 id="无条件跳转"><a href="#无条件跳转" class="headerlink" title="无条件跳转"></a>无条件跳转</h3><p>同样，<code>br</code>也可以用于无条件跳转，直接通过标签完成跳转。<br>举例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">br label %if.end</span><br></pre></td></tr></table></figure><p>直接无条件跳转到<code>%if.end</code>标签处。</p><h3 id="switch语句用法"><a href="#switch语句用法" class="headerlink" title="switch语句用法"></a>switch语句用法</h3><p>对应于编程员中的<code>switch</code>语句，测试代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(x)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>clang</code>完成编译后，对应的 llvm IR 如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i32 @main() #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">retval = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">x = alloca i32, align 4</span></span><br><span class="line">  store i32 0, ptr %retval, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %x)</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %x, align 4</span></span><br><span class="line">  switch i32 %0, label %sw.default [</span><br><span class="line">    i32 1, label %sw.bb</span><br><span class="line">    i32 2, label %sw.bb2</span><br><span class="line">    i32 3, label %sw.bb4</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">sw.bb:                                            ; preds = %entry</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call1 = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str.1)</span></span><br><span class="line">  br label %sw.epilog</span><br><span class="line"></span><br><span class="line">sw.bb2:                                           ; preds = %entry</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call3 = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str.2)</span></span><br><span class="line">  br label %sw.epilog</span><br><span class="line"></span><br><span class="line">sw.bb4:                                           ; preds = %entry</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call5 = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str.3)</span></span><br><span class="line">  br label %sw.epilog</span><br><span class="line"></span><br><span class="line">sw.default:                                       ; preds = %entry</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call6 = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str.4)</span></span><br><span class="line">  br label %sw.epilog</span><br><span class="line"></span><br><span class="line">sw.epilog:                                        ; preds = %sw.default, %sw.bb4, %sw.bb2, %sw.bb</span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分是<code>switch</code>最为重要的部分，有三个重要点：</p><ul><li><code>switch</code>后面的<code>i32 %0</code>：用于判断跳转到哪个分支的条件，相当于 C 源代码中的 switch 中的 x；</li><li><code>label %sw.default</code>：默认情况下跳转到的分支，即 default 语句跳转的位置；</li><li>后续是一个数组，表示每一种<code>switch</code>语句跳转到的标签处；</li></ul><p>比如说，<code>i32 %0</code>为1，则跳转到<code>label %sw.bb</code>分支，默认情况下（<code>default</code>）会跳转到<code>label %sw.default</code>分支。<br> llvm 后端将<code>switch</code>语句具体到汇编实现通常由两种方式：一系列条件语句、跳转表。其中跳转表的基本思想就是：由于数组中索引查找的时间复杂度为<code>O(1)</code>，所以可以根据<code>switch</code>中传入的<code>x</code>值，判断跳转到的目标地址。</p><h3 id="select指令"><a href="#select指令" class="headerlink" title="select指令"></a>select指令</h3><p>有如下C测试代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">0</span>) y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    foo(<span class="number">1</span>);</span><br><span class="line">    foo(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中间表示<code>.ll</code>文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @foo(i32 noundef %x) #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">x.addr = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">y = alloca i32, align 4</span></span><br><span class="line">  store i32 %x, ptr %x.addr, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %x.addr, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">cmp = icmp sgt i32 %0, 0</span></span><br><span class="line">  br i1 %cmp, label %if.then, label %if.else</span><br><span class="line"></span><br><span class="line">if.then:                                          ; preds = %entry</span><br><span class="line">  store i32 1, ptr %y, align 4</span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.else:                                          ; preds = %entry</span><br><span class="line">  store i32 2, ptr %y, align 4</span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.end:                                           ; preds = %if.else, %if.then</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的测试代码，实际上y只需要赋值一次，也就是说，可以将<code>br</code>命令改为<code>select</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">cmp = icmp sgt i32 %0, 0</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">y = <span class="keyword">select</span> i1 %cmp, i32 1, i32 2  ; 如果 %cmp 为真，%y = 1，否则 %y = 2</span></span><br></pre></td></tr></table></figure><p><code>select</code>命令接收三个参数，类似于 C 语言的三元运算符，如下：</p><ul><li>第一个参数是用于判断的布尔值，也就是<code>i1</code>类型的<code>icmp</code>命令判断的结果；</li><li>后续两个参数分别是<code>true</code>和<code>false</code>要跳转的位置；</li><li>同<code>br</code>命令不一样，<code>select</code>命令是值选择，而不是控制流跳转；</li></ul><h3 id="phi指令"><a href="#phi指令" class="headerlink" title="phi指令"></a><code>phi</code>指令</h3><p>上面提到的<code>select</code>指令只支持两个选择，但是<code>phi</code>支持多个选择。即通过控制流进行判断（这里的控制流指的是前面执行的基本块，根据执行的基本块标签决定 phi 选择哪个值）。该指令支持的参数如下：</p><ul><li>第一个参数：返回值类型</li><li>多个数组，根据前面的基本块确定后续的操作</li></ul><p>比如说，上面的 llvm IR 可改写成如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @foo(i32 noundef %x) #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">cmp = icmp sgt i32 %x, 0</span></span><br><span class="line">  br i1 %cmp, label %if.then, label %if.else</span><br><span class="line"></span><br><span class="line">if.then:</span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.else:</span><br><span class="line">  br label %if.end</span><br><span class="line"></span><br><span class="line">if.end:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">y = phi i32 [ 1, %if.then ], [ 2, %if.else ]  ; 根据前驱块选择值</span></span><br><span class="line">  call void @print(i32 %y)</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是：<code>select</code>和<code>phi</code>都是值选择，而不是标签跳转。</p><h2 id="llvm-IR中的函数"><a href="#llvm-IR中的函数" class="headerlink" title="llvm IR中的函数"></a>llvm IR中的函数</h2><p>一个常见的函数包括以下组成：定义、声明、参数、返回值。那么针对此结构，对应的 llvm IR 结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i32 @main() #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">retval = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">p = alloca %struct.Point, align 8</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">result = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">total = alloca i32, align 4</span></span><br><span class="line">  store i32 0, ptr %retval, align 4</span><br><span class="line">  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %p, ptr align 8 @__const.main.p, i64 16, i1 false)</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">x = getelementptr inbounds nuw %struct.Point, ptr %p, i32 0, i32 0</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr %x, align 8</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">y = getelementptr inbounds nuw %struct.Point, ptr %p, i32 0, i32 1</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">1 = load i64, ptr %y, align 8</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">conv = trunc i64 %1 to i32</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = call i32 @add(i32 noundef %0, i32 noundef %conv)</span></span><br><span class="line">  store i32 %call, ptr %result, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call1 = call i32 @sum_to_n(i32 noundef 5)</span></span><br><span class="line">  store i32 %call1, ptr %total, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">2 = load i32, ptr %result, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">3 = load i32, ptr %total, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">4 = load i32, ptr @g_counter, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">5 = load double, ptr @g_ratio, align 8</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call2 = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str, i32 noundef %2, i32 noundef %3, i32 noundef %4, double noundef %5)</span></span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)</span><br><span class="line">declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #1</span><br><span class="line"></span><br><span class="line">declare i32 @printf(ptr noundef, ...) #2</span><br></pre></td></tr></table></figure><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>从上面的输出可知，一个最基础的函数定义框架就是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define 链接性（默认external） 返回值  函数名(函数列表)  属性组 &#123;</span><br><span class="line">entry:</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里的<code>define</code>就说明这里是一个函数的定义，链接性说明了如果多个模块中出现同名符号，应该如何处理，在这里默认是<code>external</code>，说明该符号外部可见的，且可以被外部调用；参数传递了一个<code>i32</code>类型的不能是非定义的整型数。</p><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>函数声明指的是在一个模块下，可以使用别的模块中的函数，这时就需要在该模块下声明函数，通过关键字<code>declare</code>声明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #1</span><br><span class="line"></span><br><span class="line">declare i32 @printf(ptr noundef, ...) #2</span><br></pre></td></tr></table></figure><p>在函数声明中，需要指明函数的返回值、函数名、函数参数以及属性组（和定义不一样，没有链接性）</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>在 llvm IR 中，通过<code>call</code>命令调用函数，举例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">call = call i32 @add(i32 noundef %0, i32 noundef %conv)</span></span><br></pre></td></tr></table></figure><p>在函数调用中，有两个关键点，函数的返回值、函数的参数列表。在这里，<code>i32</code>就是函数的返回值类型，表明<code>add</code>函数返回一个<code>int</code>类型的整型数；参数有两个，是两个<code>int</code>类型的非未定义的整型数。<br>在此过程中，需要知道两件事：</p><ul><li>被调用的函数需要知道参数放在哪里？</li><li>调用者需要知道调用函数的返回值在哪里？</li></ul><p>为了解决这个问题，人们提出了 C 调用约定，内容如下：</p><ul><li>参数传递规则：所有参数按顺序放入指定寄存器，如果寄存器数量不够，则剩余的从右往左顺序压栈。</li><li>返回值传递规则：按先后顺序放入寄存器，或者调用者分配的空间中，如果只有一个返回值，则会放在<code>rax</code>中</li></ul><p>除了C调用约定外，还有 fastcc 调用约定，该种约定方式主要是为了解决尾调用优化，具体实现方案：</p><ul><li>尽可能使用寄存器传参，避免访问栈，从而提高函数调用性能。</li></ul><p>为什么需要尾调用优化呢？在正常情况下，如果调用一个函数，则会分配对应的栈帧，然后将函数的参数、函数的返回地址等信息传入栈中，如果此时函数是递归函数，则会产生非常大的内存消耗。但是如果使用尾调用优化，即复用调用者的栈，这样的话，就可以有效减少内存消耗。</p><h2 id="llvm-IR中的异常处理"><a href="#llvm-IR中的异常处理" class="headerlink" title="llvm IR中的异常处理"></a>llvm IR中的异常处理</h2><p>一般情况下，高级语言中使用<code>try-catch</code>以及<code>throw</code>块作为异常处理方式。异常处理的本质是：栈展开机制+类型匹配机制实现异常的传播和捕获。整个过程可以分为三个阶段：</p><ul><li>抛出：当执行到<code>throw</code>块时，使用<code>__cxa_allocate_exception</code>分配异常对象的内存，然后调用<code>__cxa_throw</code>抛出异常，此时控制流不再继续执行函数，而是会进行栈展开；</li><li>栈展开：从抛出点开始，沿调用栈向上遍历栈帧。对每个栈帧：<br> a. 检查是否有对应的LSDA（Language Specific Data Area）<br> b. 如果有，调用该栈帧中自动变量的析构函数（清理资源）<br> c. 检查是否有匹配的catch块<br> d. 如果找到匹配，停止展开，跳转到catch块<br>如果到main函数仍未找到匹配，调用std::terminate</li><li>捕获：当找到合适的<code>catch</code>块时，控制流转到捕获代码处，异常对象指针传递给<code>catch</code>，程序从该点恢复执行。</li></ul><p>以下面的测试代码为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">may_throw</span><span class="params">(<span class="type">bool</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;Error occurred&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">may_throw</span>(<span class="literal">true</span>);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;No exception\n&quot;</span>;</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">const</span> std::exception&amp; e) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Caught exception: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 llvm IR 代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">; Function Attrs: mustprogress noinline optnone uwtable</span><br><span class="line">define dso_local void @_Z9may_throwb(i1 noundef zeroext %flag) #0 personality ptr @__gxx_personality_v0 !dbg !807 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">flag.addr = alloca i8, align 1</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">exn.slot = alloca ptr, align 8</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">ehselector.slot = alloca i32, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">storedv = zext i1 %flag to i8</span></span><br><span class="line">  store i8 %storedv, ptr %flag.addr, align 1</span><br><span class="line">    #dbg_declare(ptr %flag.addr, !812, !DIExpression(), !813)</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i8, ptr %flag.addr, align 1, !dbg !814</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">loadedv = trunc i8 %0 to i1, !dbg !814</span></span><br><span class="line">  br i1 %loadedv, label %if.then, label %if.end, !dbg !814</span><br><span class="line"></span><br><span class="line">if.then:                                          ; preds = %entry</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">exception = call ptr @__cxa_allocate_exception(i64 16) <span class="comment">#6, !dbg !816</span></span></span><br><span class="line">  invoke void @_ZNSt13runtime_errorC1EPKc(ptr noundef nonnull align 8 dereferenceable(16) %exception, ptr noundef @.str)</span><br><span class="line">          to label %invoke.cont unwind label %lpad, !dbg !817</span><br><span class="line"></span><br><span class="line">invoke.cont:                                      ; preds = %if.then</span><br><span class="line">  call void @__cxa_throw(ptr %exception, ptr @_ZTISt13runtime_error, ptr @_ZNSt13runtime_errorD1Ev) #7, !dbg !816</span><br><span class="line">  unreachable, !dbg !816</span><br><span class="line"></span><br><span class="line">lpad:                                             ; preds = %if.then</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">1 = landingpad &#123; ptr, i32 &#125;</span></span><br><span class="line">          cleanup, !dbg !818</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">2 = extractvalue &#123; ptr, i32 &#125; %1, 0, !dbg !818</span></span><br><span class="line">  store ptr %2, ptr %exn.slot, align 8, !dbg !818</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">3 = extractvalue &#123; ptr, i32 &#125; %1, 1, !dbg !818</span></span><br><span class="line">  store i32 %3, ptr %ehselector.slot, align 4, !dbg !818</span><br><span class="line">  call void @__cxa_free_exception(ptr %exception) #6, !dbg !816</span><br><span class="line">  br label %eh.resume, !dbg !816</span><br><span class="line"></span><br><span class="line">if.end:                                           ; preds = %entry</span><br><span class="line">  ret void, !dbg !819</span><br><span class="line"></span><br><span class="line">eh.resume:                                        ; preds = %lpad</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">exn = load ptr, ptr %exn.slot, align 8, !dbg !816</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">sel = load i32, ptr %ehselector.slot, align 4, !dbg !816</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">lpad.val = insertvalue &#123; ptr, i32 &#125; poison, ptr %exn, 0, !dbg !816</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">lpad.val1 = insertvalue &#123; ptr, i32 &#125; %lpad.val, i32 %sel, 1, !dbg !816</span></span><br><span class="line">  resume &#123; ptr, i32 &#125; %lpad.val1, !dbg !816</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面有几个关键的指令，如下：</p><h3 id="invoke：可能抛出异常的函数调用"><a href="#invoke：可能抛出异常的函数调用" class="headerlink" title="invoke：可能抛出异常的函数调用"></a>invoke：可能抛出异常的函数调用</h3><p>这个命令的主要作用是说明哪个函数可能会抛出异常，类似于函数调用<code>call</code>命令。如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">; 语法：invoke 返回值 = 调用函数(参数) to 正常标签 unwind 异常标签</span><br><span class="line">invoke void @_Z9may_throwb(i1 noundef zeroext true)</span><br><span class="line">        to label %invoke.cont unwind label %lpad</span><br></pre></td></tr></table></figure><p><code>_Z9may_throwb</code>就是可能会抛出异常的函数，就是上述<code>C++</code>源代码中的<code>may_throw</code>函数。后续的<code>to</code>命令，说明如果没有发生异常，应该跳转到<code>label %invoke.cont</code>标签处，发生异常后跳转到<code>label %lpad</code>标签处。</p><h3 id="landingpad：异常捕获点"><a href="#landingpad：异常捕获点" class="headerlink" title="landingpad：异常捕获点"></a>landingpad：异常捕获点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; 语法：landingpad 类型 异常过滤条件</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">0 = landingpad &#123; ptr, i32 &#125;</span></span><br><span class="line">        catch ptr @_ZTISt9exception    ; 捕获特定类型</span><br><span class="line">        cleanup                        ; 清理代码</span><br></pre></td></tr></table></figure><h3 id="resume：重新抛出异常"><a href="#resume：重新抛出异常" class="headerlink" title="resume：重新抛出异常"></a>resume：重新抛出异常</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; 语法：resume 异常值</span><br><span class="line">resume &#123; ptr, i32 &#125; %lpad.val</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编译器/llvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llvm IR </tag>
            
            <tag> .ll文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>llvm初勘之llvm IR简单介绍</title>
      <link href="/2025/10/08/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bllvm%20IR%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
      <url>/2025/10/08/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bllvm%20IR%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="llvm-IR是什么"><a href="#llvm-IR是什么" class="headerlink" title="llvm IR是什么"></a>llvm IR是什么</h2><p>作为<code>llvm</code>前后端的桥梁，<code>llvm IR</code>在其中占据十分重要的作用。<code>llvm IR</code>即<code>llvm</code>中间表示，是语言无关和平台无关的，即不依赖于前端的高级语言和后端平台，是一种低级语言，特性如下：</p><ul><li>类<code>RISC</code>三地址指令</li><li>使用无限虚拟寄存器的SSA形式</li><li>低层次控制流结构</li><li><code>Load/Store</code>指令使用类型指针</li></ul><h3 id="为什么需要llvm-IR呢？"><a href="#为什么需要llvm-IR呢？" class="headerlink" title="为什么需要llvm IR呢？"></a>为什么需要<code>llvm IR</code>呢？</h3><p>在实际的编译过程中，可能会需要多个开发语言，那么语言的开发者就会想到如下问题：</p><ol><li>怎么能让编程语言在尽可能多的目标架构平台上运行？</li><li>怎么才能让编程语言充分利用各个平台自身的优势，做到最大程度的优化？</li></ol><p>如果没有<code>llvm IR</code>，此时如果想要增加一种新的语言支持，会发生什么情况呢？<br>在没有<code>llvm IR</code>这样统一的、与语言和硬件无关的中间表示时，编译器通常是<code>N*M</code>的复杂度（N种前端、M种后端），这意味着要让所有语言在所有架构上都运行，理论上则需要<code>N*M</code>个不同的编译器转换模块。如果此时添加一种新的语言支持，则需要进行如下修改：</p><ul><li>前端：需要编写对应的词法分析、语法分析等功能的实现，然后将其映射到中间表示上；</li><li>中端：中端要进行的操作可能会少一点，但是如果新的语言的中间表示是全新的，那么以前的优化则完全不可用；</li><li>后端：必须为每一个目标架构都编写一个独立的代码生成器；</li></ul><p>如果此时有<code>llvm IR</code>，由于<code>llvm IR</code>将前端和后端实现了完全的解耦，前端的操作并不会影响后端，后端的操作也不会影响前端，所以此时要做的工作就非常少。也就是将复杂度从<code>N*M</code>降低到了<code>N+M</code>，如下：</p><ul><li>前端：需要提供从源代码到<code>llvm IR</code>的支持；</li><li>中端：不需要做任何修改；</li><li>后端：不需要做任何修改</li></ul><h3 id="llvm-IR的三种表示形式"><a href="#llvm-IR的三种表示形式" class="headerlink" title="llvm IR的三种表示形式"></a>llvm IR的三种表示形式</h3><p><code>llvm IR</code>有三种表示形式，分别是<code>.ll</code>（可读格式）文件、<code>.bc</code>（位代码）文件以及内存格式文件。三种文件格式中，内存格式是存在于<code>llvm</code>的整个运行过程中的，是其通用的内部表示，<code>.ll</code>格式是我们程序员通常看的格式，可以理解为汇编语言格式；<code>.bc</code>文件也称位码文件，是有一串0和1组成。<br>这三种表示形式可以互相转换，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.c → .ll (文本IR)</span></span><br><span class="line">clang -S -emit-llvm test.c -o test.ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.ll → .bc (位码)</span></span><br><span class="line">llvm-as test.ll -o test.bc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bc → .ll</span> </span><br><span class="line">llvm-dis test.bc -o test.ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bc → 目标文件</span></span><br><span class="line">llc test.bc -o test.s</span><br></pre></td></tr></table></figure><p>想要理解<code>llvm IR</code>中间表示，则需要理解<code>.ll</code>文件中的信息，比如说代码中的全局变量在<code>llvm IR</code>中是怎么实现的等等。</p><h3 id="针对llvm-IR的优化"><a href="#针对llvm-IR的优化" class="headerlink" title="针对llvm IR的优化"></a>针对llvm IR的优化</h3><p><code>llvm</code>中使用<code>opt</code>进行优化，这些优化都是在<code>llvm IR</code>的基础上进行的，即都是与语言和架构无关的，所以在这里进行的是通用优化，比如说死代码消除等。<br>需要注意的是，如果直接使用<code>opt</code>完成优化，可能不会有任何优化出现，原因是：<code>clang</code>默认给所有<code>O0</code>优化级别的函数增加<code>optnone</code>属性，导致这些函数不会被优化。<br>以下面的测试代码为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> global_data = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;global_data = %d\n&quot;</span>, global_data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们使用命令<code>clang -S -emit-llvm test.c</code>编译并生成<code>.ll</code>中间表示，查看其中与<code>main</code>函数相关的属性信息，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">define dso_local i32 @main() #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">retval = alloca i32, align 4</span></span><br><span class="line">  store i32 0, ptr %retval, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr @global_data, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str, i32 noundef %0)</span></span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone uwtable &quot;frame-pointer&quot;=&quot;all&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>main</code>函数中具有<code>optnone</code>属性，此时直接使用<code>opt -S test.ll -O3 -o test_opt.ll</code>完成优化，<code>.ll</code>文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">define dso_local i32 @main() local_unnamed_addr #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">retval = alloca i32, align 4</span></span><br><span class="line">  store i32 0, ptr %retval, align 4</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr @global_data, align 4</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef @.str, i32 noundef %0)</span></span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone uwtable &quot;frame-pointer&quot;=&quot;all&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br></pre></td></tr></table></figure><p>可以看到，使用<code>opt</code>和未使用<code>opt</code>的区别在于：使用<code>opt</code>之后<code>main</code>函数增加了一个<code>local_unnamed_addr</code>属性，该属性表明该函数在当前模块中是局部的，不必要关注该函数对应符号的地址，只关注其内容。<br>当我们一开始在使用<code>clang</code>的时候就指定优化级别，则不会出现该属性，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define dso_local noundef i32 @main() local_unnamed_addr #0 &#123;</span><br><span class="line">entry:</span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">0 = load i32, ptr @global_data, align 4, !tbaa !5</span></span><br><span class="line"><span class="meta prompt_">  %</span><span class="language-bash">call = <span class="built_in">tail</span> call i32 (ptr, ...) @<span class="built_in">printf</span>(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %0)</span></span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; nofree nounwind uwtable &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &#125;</span><br></pre></td></tr></table></figure><p>可以看到，函数的反汇编代码这一块有了很大的减少，所以可以说明，在使用<code>clang/clang++</code>的时候，如果未指定优化级别，则默认是<code>-O0</code>级别，不会进行任何优化，此时使用<code>opt</code>命令进行优化也不会起到任何的作用。<br>如果想要解决这个问题，可以通过以下两种方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法1：编译时禁用 optnone</span></span><br><span class="line">clang -S -emit-llvm -Xclang -disable-O0-optnone test.c -o test.ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法2：使用 opt 强制移除 optnone</span></span><br><span class="line">opt -S -O3 -force-remove-attribute=optnone test.ll -o test_opt.ll</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编译器/llvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llvm IR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>llvm初勘之clang(一)</title>
      <link href="/2025/10/07/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bclang%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/10/07/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bclang%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是clang"><a href="#什么是clang" class="headerlink" title="什么是clang"></a>什么是clang</h2><p>clang是llvm中的一个子项目，是llvm中的用于编译C语言的前端驱动，负责完成预处理、词法分析、语法分析、语义分析、静态分析以及生成中间代码。<br>在实际的应用中，clang驱动会调用cc1工具完成编译功能。</p><h2 id="clang静态分析器"><a href="#clang静态分析器" class="headerlink" title="clang静态分析器"></a>clang静态分析器</h2><p>clang静态分析器是在语义分析完成之后需要进行静态分析。这里的静态分析指的是在编译时模拟程序运行，通过<strong>路径敏感</strong>的方式判断程序中哪些路径不可执行，进而删除&#x2F;裁剪掉这些路径。<br>路径敏感：考虑程序控制流中所有可能的路径，进而模拟程序执行。在clang中有如下内容：</p><ul><li>ProgramState：程序状态，类似于虚拟机中的快照，包含变量的符号值、内存状态、约束集等；</li><li>ConstrainManager：约束管理器，负责管理和推理这些约束；</li></ul><p>在clang内部，语义分析完成后，生成的是AST抽象语法树，在静态分析器中，会根据AST构建CFG（程序控制流图），然后基于这个CFG进行推理。在推理过程中，如果遇到分支状态，则会做出假设，以下面的代码为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">5</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">3</span>) &#123; ... &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在到了if这里时，会有两个状态s1和s2，其约束集如下：<br>s1：假设 i&gt;5 ，此时的约束集为  i&gt;5<br>s2：假设 i&lt;&#x3D;5 ，此时的约束集为 i&lt;&#x3D;5<br>以s1节点出发，继续往下，此时遇到<code>if(i&lt;3)</code>，假设这个条件满足，那么此时的约束集变成了<code>i&gt;5, i&lt;3</code>，可以看到，这两个此时会发生冲突，所以此条路径不可能被满足，所以这条路径会被删除。<br>进而判断s2这条路径…</p><h2 id="clang编译一个源程序的详细过程"><a href="#clang编译一个源程序的详细过程" class="headerlink" title="clang编译一个源程序的详细过程"></a>clang编译一个源程序的详细过程</h2><p>通过<code>-v</code>参数可以打印出编译链接的详细过程，这里以<code>hello.cpp</code>为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;hello world!&quot;</span> &lt;&lt; endl;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过命令<code>clang++ -v hello.cpp -o hello</code>查看整个编译链接流程，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">❯ clang++ -v hello.cpp -o hello</span><br><span class="line">clang version 22.0.0git (git@github.com:llvm/llvm-project.git 7d748a9ceb3716a216a8b586b1d31e046bdee039)</span><br><span class="line">Target: x86_64-unknown-linux-gnu</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /home/dus/llvm/tools/RelWithDebInfo/bin</span><br><span class="line">Build config: +assertions</span><br><span class="line">Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/13</span><br><span class="line">Selected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/13</span><br><span class="line">Candidate multilib: .;@m64</span><br><span class="line">Selected multilib: .;@m64</span><br><span class="line"> &quot;/home/dus/llvm/tools/RelWithDebInfo/bin/clang-22&quot; -cc1 -triple x86_64-unknown-linux-gnu -emit-obj -dumpdir hello- -disable-free -clear-ast-before-backend -main-file-name hello.cpp -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=all -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fdebug-compilation-dir=/home/dus/llvm/test -v -fcoverage-compilation-dir=/home/dus/llvm/test -resource-dir /home/dus/llvm/tools/RelWithDebInfo/lib/clang/22 -internal-isystem /usr/include/c++/v1 -internal-isystem /home/dus/llvm/tools/RelWithDebInfo/lib/clang/22/include -internal-isystem /usr/local/include -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/13/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -fdeprecated-macro -ferror-limit 19 -fmessage-length=92 -fgnuc-version=4.2.1 -fskip-odr-check-in-gmf -fcxx-exceptions -fexceptions -fcolor-diagnostics -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/hello-74c908.o -x c++ hello.cpp</span><br><span class="line">clang -cc1 version 22.0.0git based upon LLVM 22.0.0git default target x86_64-unknown-linux-gnu</span><br><span class="line">ignoring nonexistent directory &quot;/usr/lib/gcc/x86_64-linux-gnu/13/../../../../x86_64-linux-gnu/include&quot;</span><br><span class="line">ignoring nonexistent directory &quot;/include&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include <span class="string">&quot;...&quot;</span> search starts here:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;...&gt; search starts here:</span></span><br><span class="line"> /usr/include/c++/v1</span><br><span class="line"> /home/dus/llvm/tools/RelWithDebInfo/lib/clang/22/include</span><br><span class="line"> /usr/local/include</span><br><span class="line"> /usr/include/x86_64-linux-gnu</span><br><span class="line"> /usr/include</span><br><span class="line">End of search list.</span><br><span class="line"> &quot;/home/dus/llvm/tools/RelWithDebInfo/bin/ld.lld&quot; -z relro --hash-style=gnu --eh-frame-hdr -m elf_x86_64 -pie -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o hello /lib/x86_64-linux-gnu/Scrt1.o /lib/x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/13/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/13 -L/usr/lib/gcc/x86_64-linux-gnu/13/../../../../lib64 -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu -L/usr/lib64 -L/lib -L/usr/lib /tmp/hello-74c908.o -lc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-linux-gnu/13/crtendS.o /lib/x86_64-linux-gnu/crtn.o</span><br></pre></td></tr></table></figure><p>可以看到，从<code>.cpp</code>文件到可执行文件主要调用了<code>clang-22</code>和<code>ld.lld</code>。其中<code>clang-22</code>主要完成了前中后端，相当于上一篇文章中<code>clang+opt+llc(-filetype=obj)</code>的整合，此时生成了<code>.o</code>目标文件，后续通过<code>ld.lld</code>完成链接过程，生成可执行文件。</p><p>为了更好的理解中间过程，可以通过给<code>cc1</code>传递参数，打印出中间的结果，如下：</p><ol><li>词法分析</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ -fmodules -fsyntax-only -Xclang -dump-tokens hello.cpp</span><br></pre></td></tr></table></figure><p>此时会打印出<code>hello.cpp</code>文件的词法分析信息，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">annot_module_include  Loc=&lt;hello.cpp:1:1&gt;</span><br><span class="line">using &#x27;using&#x27;  [StartOfLine] Loc=&lt;hello.cpp:3:1&gt;</span><br><span class="line">namespace &#x27;namespace&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:3:7&gt;</span><br><span class="line">identifier &#x27;std&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:3:17&gt;</span><br><span class="line">semi &#x27;;&#x27;  Loc=&lt;hello.cpp:3:20&gt;</span><br><span class="line">int &#x27;int&#x27;  [StartOfLine] Loc=&lt;hello.cpp:5:1&gt;</span><br><span class="line">identifier &#x27;main&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:5:5&gt;</span><br><span class="line">l_paren &#x27;(&#x27;  Loc=&lt;hello.cpp:5:9&gt;</span><br><span class="line">r_paren &#x27;)&#x27;  Loc=&lt;hello.cpp:5:10&gt;</span><br><span class="line">l_brace &#x27;&#123;&#x27;  Loc=&lt;hello.cpp:5:11&gt;</span><br><span class="line">identifier &#x27;cout&#x27;  [StartOfLine] [LeadingSpace] Loc=&lt;hello.cpp:6:2&gt;</span><br><span class="line">lessless &#x27;&lt;&lt;&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:6:7&gt;</span><br><span class="line">string_literal &#x27;&quot;hello world!&quot;&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:6:10&gt;</span><br><span class="line">lessless &#x27;&lt;&lt;&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:6:25&gt;</span><br><span class="line">identifier &#x27;endl&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:6:28&gt;</span><br><span class="line">semi &#x27;;&#x27;  Loc=&lt;hello.cpp:6:32&gt;</span><br><span class="line">return &#x27;return&#x27;  [StartOfLine] [LeadingSpace] Loc=&lt;hello.cpp:7:2&gt;</span><br><span class="line">numeric_constant &#x27;0&#x27;  [LeadingSpace] Loc=&lt;hello.cpp:7:9&gt;</span><br><span class="line">semi &#x27;;&#x27;  Loc=&lt;hello.cpp:7:10&gt;</span><br><span class="line">r_brace &#x27;&#125;&#x27;  [StartOfLine] Loc=&lt;hello.cpp:8:1&gt;</span><br><span class="line">eof &#x27;&#x27;  Loc=&lt;hello.cpp:8:2&gt;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>hello.cpp</code>文件中，<code>(</code>就是一个<code>token</code>，在词法分析中被识别为<code>l_paren</code>，上面的就是词法分析的输出结果。因此，词法分析的最终输出结果就是一个个的<code>token</code>流。</p><ol start="2"><li>语法分析</li></ol><p>整个编译过程中，除了llvm IR,最重要的就是AST（抽象语法树），可以通过命令查看抽象语法树的输出，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ -fmodules -fsyntax-only -Xclang -ast-dump hello.cpp</span><br></pre></td></tr></table></figure><p>上面命令的运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">TranslationUnitDecl 0x6506cc477cd8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; &lt;undeserialized declarations&gt;</span><br><span class="line">|-TypedefDecl 0x6506cc4789c8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __int128_t &#x27;__int128&#x27;</span><br><span class="line">| `-BuiltinType 0x6506cc4782a0 &#x27;__int128&#x27;</span><br><span class="line">|-TypedefDecl 0x6506cc478a38 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __uint128_t &#x27;unsigned __int128&#x27;</span><br><span class="line">| `-BuiltinType 0x6506cc4782c0 &#x27;unsigned __int128&#x27;</span><br><span class="line">|-TypedefDecl 0x6506cc4cc248 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __NSConstantString &#x27;__NSConstantString_tag&#x27;</span><br><span class="line">| `-RecordType 0x6506cc4cc210 &#x27;__NSConstantString_tag&#x27; canonical</span><br><span class="line">|   `-CXXRecord 0x6506cc478a90 &#x27;__NSConstantString_tag&#x27;</span><br><span class="line">|-TypedefDecl 0x6506cc4785b8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_ms_va_list &#x27;char *&#x27;</span><br><span class="line">| `-PointerType 0x6506cc478570 &#x27;char *&#x27; imported</span><br><span class="line">|   `-BuiltinType 0x6506cc477d80 &#x27;char&#x27;</span><br><span class="line">|-TypedefDecl 0x6506cc478958 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_va_list &#x27;__va_list_tag[1]&#x27;</span><br><span class="line">| `-ConstantArrayType 0x6506cc478900 &#x27;__va_list_tag[1]&#x27; 1 </span><br><span class="line">|   `-RecordType 0x6506cc4788c0 &#x27;__va_list_tag&#x27; imported canonical</span><br><span class="line">|     `-CXXRecord 0x6506cc478610 &#x27;__va_list_tag&#x27;</span><br><span class="line">|-ImportDecl 0x6506cc4ccce0 &lt;hello.cpp:1:1&gt; col:1 implicit std_iostream</span><br><span class="line">|-UsingDirectiveDecl 0x6506cea257d0 &lt;line:3:1, col:17&gt; col:17 Namespace 0x6506ce9d2fb8 &#x27;std&#x27;</span><br><span class="line">`-FunctionDecl 0x6506cea25888 &lt;line:5:1, line:8:1&gt; line:5:5 main &#x27;int ()&#x27;</span><br><span class="line">  `-CompoundStmt 0x6506ceaae580 &lt;col:11, line:8:1&gt;</span><br><span class="line">    |-CXXOperatorCallExpr 0x6506ceaae4e8 &lt;line:6:2, col:28&gt; &#x27;std::ostream&#x27; lvalue &#x27;&lt;&lt;&#x27;</span><br><span class="line">    | |-ImplicitCastExpr 0x6506ceaae4d0 &lt;col:25&gt; &#x27;std::ostream &amp;(*)(std::ostream &amp;(*)(std::ostream &amp;))&#x27; &lt;FunctionToPointerDecay&gt;</span><br><span class="line">    | | `-DeclRefExpr 0x6506ceaae448 &lt;col:25&gt; &#x27;std::ostream &amp;(std::ostream &amp;(*)(std::ostream &amp;))&#x27; lvalue CXXMethod 0x6506cea9b6e8 &#x27;operator&lt;&lt;&#x27; &#x27;std::ostream &amp;(std::ostream &amp;(*)(std::ostream &amp;))&#x27;</span><br><span class="line">    | |-CXXOperatorCallExpr 0x6506ceacafd8 &lt;col:2, col:10&gt; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt;&#x27;:&#x27;std::ostream&#x27; lvalue &#x27;&lt;&lt;&#x27;</span><br><span class="line">    | | |-ImplicitCastExpr 0x6506ceacafc0 &lt;col:7&gt; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(*)(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;, const char *)&#x27; &lt;FunctionToPointerDecay&gt;</span><br><span class="line">    | | | `-DeclRefExpr 0x6506ceacaf38 &lt;col:7&gt; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;, const char *)&#x27; lvalue Function 0x6506ceabc0f0 &#x27;operator&lt;&lt;&#x27; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;, const char *)&#x27;</span><br><span class="line">    | | |-DeclRefExpr 0x6506cea1a390 &lt;col:2&gt; &#x27;ostream&#x27;:&#x27;std::ostream&#x27; lvalue Var 0x6506cea25980 &#x27;cout&#x27; &#x27;ostream&#x27;:&#x27;std::ostream&#x27;</span><br><span class="line">    | | `-ImplicitCastExpr 0x6506ceacaf20 &lt;col:10&gt; &#x27;const char *&#x27; &lt;ArrayToPointerDecay&gt;</span><br><span class="line">    | |   `-StringLiteral 0x6506cea18e90 &lt;col:10&gt; &#x27;const char[13]&#x27; lvalue &quot;hello world!&quot;</span><br><span class="line">    | `-ImplicitCastExpr 0x6506ceaae430 &lt;col:28&gt; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(*)(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;)&#x27; &lt;FunctionToPointerDecay&gt;</span><br><span class="line">    |   `-DeclRefExpr 0x6506ceaae408 &lt;col:28&gt; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;)&#x27; lvalue Function 0x6506ceacfa10 &#x27;endl&#x27; &#x27;basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;(basic_ostream&lt;char, std::char_traits&lt;char&gt;&gt; &amp;)&#x27; (FunctionTemplate 0x6506ceaccae0 &#x27;endl&#x27;)</span><br><span class="line">    `-ReturnStmt 0x6506ceaae570 &lt;line:7:2, col:9&gt;</span><br><span class="line">      `-IntegerLiteral 0x6506ceaae550 &lt;col:9&gt; &#x27;int&#x27; 0</span><br></pre></td></tr></table></figure><p>上述输出，就是<code>hello.cpp</code>的语法树结果，该语法树中每个节点有如下重要信息：</p><ul><li>节点类型说明：比如说 <code>FunctionDecl</code> 说明该节点是一个函数定义节点；<code>CXXOperatorCallExpr</code> 表示<code>C++</code>运算符调用表达式；</li><li>内存地址（虚拟地址）：比如说<code>FunctionDecl</code>节点的虚拟地址为<code>0x6506cea25888</code>；</li><li>源码位置：比如说<code>FunctionDecl</code>节点对应的函数名为<code>main</code>，所在位置为<code>&lt;line:5:1, line:8:1&gt; line:5:5</code>，即表明<code>main</code>函数这个函数体的位置是第5行到第8行，其中<code>main</code>标识符所在的位置是第5行第5列</li><li>层次结构：整个AST中有如下结构，表明抽象树节点之间的关系，如下<ul><li><code>|</code>：表明上面还有兄弟节点，用竖线连接起来；</li><li><code>|-</code>：该节点是某个父节点的子节点之一（非最后一个子节点）；</li><li>&#96;&#96;-&#96;：该节点是某个父节点的最后一个子节点；</li><li>空格：用来对齐，表示当前节点所在层级</li></ul></li></ul><p>以<code>main</code>函数这部分为例，分析并使用<code>xmind</code>绘制出树形结构。结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FunctionDecl: main &#x27;int ()&#x27;</span><br><span class="line">└── CompoundStmt</span><br><span class="line">    ├── CXXOperatorCallExpr: &#x27;&lt;&lt;&#x27;</span><br><span class="line">    │   ├── ImplicitCastExpr (FunctionToPointerDecay)</span><br><span class="line">    │   │   └── DeclRefExpr: &#x27;operator&lt;&lt;&#x27; (CXXMethod)</span><br><span class="line">    │   ├── CXXOperatorCallExpr: &#x27;&lt;&lt;&#x27;</span><br><span class="line">    │   │   ├── ImplicitCastExpr (FunctionToPointerDecay)</span><br><span class="line">    │   │   │   └── DeclRefExpr: &#x27;operator&lt;&lt;&#x27; (Function)</span><br><span class="line">    │   │   ├── DeclRefExpr: &#x27;cout&#x27; (Var)</span><br><span class="line">    │   │   └── ImplicitCastExpr (ArrayToPointerDecay)</span><br><span class="line">    │   │       └── StringLiteral: &quot;hello world!&quot;</span><br><span class="line">    │   └── ImplicitCastExpr (FunctionToPointerDecay)</span><br><span class="line">    │       └── DeclRefExpr: &#x27;endl&#x27; (Function)</span><br><span class="line">    └── ReturnStmt</span><br><span class="line">        └── IntegerLiteral: 0</span><br></pre></td></tr></table></figure><p>上面是使用shell表示的抽象语法树，下面是我自己手绘的结构图</p><p><img src="https://cdn.jsdelivr.net/gh/firstHeart09/picgo-image/img/20251004002406597.jpg" alt="main函数抽象语法树结构体"></p>]]></content>
      
      
      <categories>
          
          <category> 编译器/llvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llvm </tag>
            
            <tag> clang </tag>
            
            <tag> AST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>llvm初勘之llvm基础知识</title>
      <link href="/2025/10/07/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bllvm%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/10/07/llvm%E5%88%9D%E5%8B%98%E4%B9%8Bllvm%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是llvm"><a href="#什么是llvm" class="headerlink" title="什么是llvm"></a>什么是llvm</h2><p>llvm是一个开源的<strong>编译器基础设施项目</strong>，由一系列可重用的编译器工具链库和工具组成。<br>llvm的设计目标是：<strong>高度模块化、可重用、跨平台</strong>。</p><h3 id="典型的三段式设计"><a href="#典型的三段式设计" class="headerlink" title="典型的三段式设计"></a>典型的三段式设计</h3><p>llvm采用经典的三段式设计，这种设计使得llvm既灵活又强大：</p><ul><li>前端：负责将源代码（如C、C++）解析，进行词法、语法、语义检查，生成与目标架构无关的llvm中间表示；</li><li>中端：也叫优化器，在llvm IR上进行与目标架构无关的优化，如死代码消除、循环优化等；</li><li>后端：负责将优化后的llvm IR映射到特定的目标架构，进行与目标架构相关的指令选择、寄存器分配、指令调度等，生成与目标架构相关的代码。严格意义上，LLVM 后端（llc）主要输出汇编文件 .s文件，但通过 Clang 可以直接得到 .o文件。</li></ul><p>可以看到，llvm IR是连接整个系统的桥梁，是实现语言与架构无关型的关键。这种设计模式带来了巨大的优势：要支持一种新语言，只需要实现对应的前端即可；要实现一个新的架构，只需要实现对应的后端即可。</p><h3 id="如何理解llvm是一个编译基础设施，而不是一个编译器"><a href="#如何理解llvm是一个编译基础设施，而不是一个编译器" class="headerlink" title="如何理解llvm是一个编译基础设施，而不是一个编译器"></a>如何理解llvm是一个编译基础设施，而不是一个编译器</h3><p>可以这样理解，llvm本身是一个编译器基础设施（编译器框架和工具包），而不是向GCC一样是一个一体化的编译器。在实际的使用中，我们不会使用llvm作为命令去编译源文件，而是通过某个语言前端（比如说C语言使用clang前端）来驱动整个编译流程，这也就是《LLVM编译器原理与实战》中为什么会说：llvm是一堆库与机制的组合，可以将源代码整体框架编译，但不能编译任何代码  的原因。<br>前端会将源代码翻译成llvm IR，然后调用llvm提供的优化器和代码生成器完成后续的流程。<br>举例如下：</p><ul><li>GCC方式：<code>gcc hello.c -o hello</code></li><li>llvm方式：<code>clang hello.c -o hello</code>（调用clang前端，内部调用llvm的库完成优化和代码生成）</li></ul><p>与之对比：</p><ul><li>GCC是一个传统的一体化的编译器，从源代码到可执行文件的整个流程都在GCC源码中实现</li><li>llvm则是将编译流程拆解为多个模块，如IR优化、目标代码生成等，并提供统一的API和库。这样，开发者可以像搭积木一样重用和扩展这些组件，从而更容易的实现新语言和新架构。</li></ul><h3 id="高度模块化、可重用"><a href="#高度模块化、可重用" class="headerlink" title="高度模块化、可重用"></a>高度模块化、可重用</h3><p>可重用：不同语言的前端（Clang、Rustc、Swiftc 等）都能重用 LLVM 的优化和后端模块；不同硬件平台的后端也能复用 LLVM IR 和优化模块。<br>可扩展：如果需要新的优化策略，可以直接写一个 LLVM Pass 插件，插入到编译管线中，而不需要重写整个编译器。<br>模块化：无论是GCC还是llvm都是模块化的，但是两者的模块化有区别：</p><ul><li>GCC具备工具链层面的模块化（编译、汇编、链接是独立工具），但其编译器内部的前端、中端、后端在源码层面高度耦合，扩展性差。</li><li>LLVM的模块化是从设计之初就在编译器内部架构层面实现的：它将语法分析、IR表示、优化、代码生成等功能全部封装为可重用的库，通过统一的LLVM IR API将各个阶段解耦</li></ul><h2 id="llvm-vs-gcc"><a href="#llvm-vs-gcc" class="headerlink" title="llvm  vs  gcc"></a>llvm  vs  gcc</h2><p>相同点：</p><ul><li>两者都是三段式设计，都包含前端、中端以及后端；</li><li>支持多语言多架构；</li><li>都包含各种优化，比如说死代码消除等；</li></ul><p>不同点：</p><ul><li>架构定位：GCC 是传统的一体化编译器，前端、中端、后端代码紧密耦合；LLVM 是编译器基础设施，由一系列库和工具组成，核心通过统一的 LLVM IR 将各模块解耦，可扩展性强。</li><li>中间表示：GCC 使用 GIMPLE 和 RTL 等内部 IR，通常不面向用户暴露；LLVM 使用统一的、平台无关的 LLVM IR（.ll &#x2F; .bc），既能作为编译阶段的桥梁，也能作为持久化和跨语言中间码使用。</li><li>扩展性：GCC 想要新增语言或架构支持，需要对编译器整体进行较大修改；LLVM 可以只实现对应的前端或后端，直接复用中端优化。</li><li>模块化与复用：GCC 的“模块化”更多体现在工具链拆分（如 as、ld 等独立程序），源码内部仍然耦合；LLVM 从设计上就是库级模块化，开发者可以像积木一样组合或替换模块，甚至只复用其中某一部分。</li></ul><h2 id="如何理解llvm-IR"><a href="#如何理解llvm-IR" class="headerlink" title="如何理解llvm IR"></a>如何理解llvm IR</h2><h3 id="什么是llvm-IR"><a href="#什么是llvm-IR" class="headerlink" title="什么是llvm IR"></a>什么是llvm IR</h3><p>llvm IR是llvm的中间表示，是前后端的桥梁。假设现在有M种编程语言，有N种目标架构，如果现在没有llvm IR,那么在整套编译器中共需要实现M*N种方法，相当于每出现一种新的编程语言或者说目标架构，都需要一套完整的前后端支持；但是有了llvm IR之后，则不需要，前后端是完全分离的，前端不会影响后端，后端也不会影响前端，此时一共需要M+N种实现。<br>同时，由于llvm IR与目标架构无关，且llvm的优化是针对于llvm IR完成的，所以想要添加一种新的优化pass是非常方便的。</p><h3 id="llvm-IR分类"><a href="#llvm-IR分类" class="headerlink" title="llvm IR分类"></a>llvm IR分类</h3><p>llvm IR有三种表示方式，分别是.ll格式、.bc格式和内存格式，如下</p><ul><li>.ll格式：类似于GCC中的汇编代码格式，是我们自己能够看懂的汇编语言格式（人类可读，用于调试和学习）</li><li>.bc格式：位代码文件，是由一串0和1组成，我们无法看懂，但是计算机能够看懂（机器可读，用于高效存储和传输）</li><li>内存格式：在整个编译流程中，llvm IR都是这个格式的（编译过程中使用，性能最优）</li></ul><p>其中，.ll格式和.bc格式之间是可以转换的，通过如下命令可实现互相转换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bc文件转为.ll文件</span></span><br><span class="line">llvm-dis hello.bc -o hello.ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.ll文件转为.bc文件</span></span><br><span class="line">llvm-as hello.ll -o hello.bc</span><br></pre></td></tr></table></figure><p>关于llvm IR的详细说明，见后续文章</p><h2 id="llvm中编译源程序的整体流程"><a href="#llvm中编译源程序的整体流程" class="headerlink" title="llvm中编译源程序的整体流程"></a>llvm中编译源程序的整体流程</h2><p>llvm将整个编译过程分为前中后端，在这里分别针对三个端做出说明。<br>前端主要用于解析源程序，进行词法、语法、语义分析、静态分析、中间代码生成等步骤，生成llvm IR中间表示。</p><ul><li>词法分析：从左到右遍历源程序字符流，识别出单词符号token。在这个过程采用正则文法，用NFA（非确定有限自动机）-&gt; DFA（确定有限自动机）实现，如 lex 就是这样的实现逻辑；</li><li>语法分析：根据文法规则把token串组织成语法结构，构成<strong>抽象语法树AST</strong>。主要的实现方法有LL(1)与LR(1)，其中LL(1)主要用在教学中，而LR(1)主要用在现在的编译器中。<ul><li>LL(1)：顾名思义，从左到右扫描，采用最左推导，每次向前看一个字符。该方法是一种<strong>自顶向下的预测分析法</strong>，通过预测分析表决定产生式。在实际使用过程中，从起始符号出发，根据预测分析表决定使用的产生式；</li><li>LR(1)：顾名思义，从左到右扫描，采用最右规约，每次向前看一个字符。该方法是一种<strong>自底向上的移近规约法</strong>，通过项目集+移近规约表来驱动分析。在使用过程中，从输入符号串出发，逐步移近token,然后尝试规约到文法符号；</li><li>OPG：算符优先，自底向上，适合算术表达式</li></ul></li><li>语义分析：对语法分析输出的AST进行逻辑判断，进行上下文语义检查，输出任然是AST抽象语法树；</li><li>静态分析：指的是在编译阶段模拟程序执行，裁剪掉不需要执行的代码。常使用的方法是路径敏感；</li><li>中间代码生成：在进行完以上步骤后，则会将AST转换为llvm的中间表示，即llvm IR；</li></ul><p>中端即公共优化器，负责进行与目标架构无关的优化，包括死代码消除、内联等；<br>后端指的是将llvm IR转换为与目标架构相关的表示，比如说汇编代码等。主要进行的是以下工作：</p><ul><li>指令选择：将llvm指令映射到目标机器指令集；</li><li>指令调度：重排指令顺序，以便充分利用流水线；</li><li>寄存器分配：llvm中有许多虚拟寄存器，该阶段的主要作用就是将其映射到目标CPU的物理寄存器中；</li><li>代码优化：针对特定架构进行的优化；</li><li>代码生成：生成汇编代码</li></ul><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============ 前端 Frontend ============</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">源代码 -&gt; LLVM IR</span></span><br><span class="line">clang++ -fPIE -S -emit-llvm hello.cpp -o hello.ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选: IR 的文本 &lt;-&gt; 二进制互转（不改变内容，只是格式转换）</span></span><br><span class="line">llvm-as hello.ll -o hello.bc     # .ll -&gt; .bc</span><br><span class="line">llvm-dis hello.bc -o hello.ll    # .bc -&gt; .ll</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============ 中端 Middleend ============</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在中间表示 (IR) 上进行优化（IR 层面，不依赖具体机器）</span></span><br><span class="line">opt -O2 hello.bc -o hello_opt.bc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============ 后端 Backend ============</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">LLVM IR -&gt; 汇编（结合目标架构，做寄存器分配、指令选择、后端优化）</span></span><br><span class="line">llc -O2 -relocation-model=pic hello_opt.bc -o hello_opt.s</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以在这里直接通过指定参数 filetype 指定生成的文件的格式，默认生成的是 .s 汇编文件，通过 -filetype=obj 可指定生成的.o 目标文件，命令如下：</span></span><br><span class="line">llc -O2 -filetype=obj -relocation-model=pic hello_opt.bc -o hello_opt.o</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">汇编 -&gt; 目标文件 (.o)</span></span><br><span class="line">clang++ -fPIE -c hello_opt.s -o hello_opt.o</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目标文件 -&gt; 可执行文件 (链接阶段)</span></span><br><span class="line">clang++ -fPIE hello_opt.o -pie -o hello</span><br></pre></td></tr></table></figure><p>当然，一般情况下，我们不这么使用，因为这样使用的话可能会出现各种各样的问题，最为常见的问题就是未定义符号问题，还有各种库文件不齐全的问题。所以，我们一般会直接使用clang完成编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ hello.cpp -o hello</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编译器/llvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llvm </tag>
            
            <tag> llvm工具使用流程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
